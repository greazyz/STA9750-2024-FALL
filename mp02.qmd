---
title: "The Business of Show Business "
author: "Gracie Zheng"
editor: visual
---

# The Business of Show Business

As a Hollywood development director, I am always looking into the next **BIG** thing. To make the biggest movie of 2025 and be invited to Cannes Film Festival, I will dive into the data of movies to find the perfect opportunity.

## Datasets for Research

Credits to IMDb, with their expansive library of movies, I will use their datasets for my research. The code to extract the data is as follows:

```{r include = FALSE}
#libraries 
library(stringr)
library(dplyr)
library(ggplot2)

get_imdb_file <- function(fname) {
  BASE_URL <- "https://github.com/michaelweylandt/STA9750/raw/main/miniprojects/mini02_preprocessed/"
  fname_ext <- paste0(fname, ".csv.zip")
  
  if (!file.exists(fname_ext)) {
    FILE_URL <- paste0(BASE_URL, fname_ext)
    download.file(FILE_URL, destfile = fname_ext)
  }
  
  # Unzip the file and read the CSV
  temp_file <- unzip(fname_ext, list = TRUE)$Name[1]  # Get the name of the first file inside the ZIP
  unzip(fname_ext)  # Unzip the file
  as.data.frame(readr::read_csv(temp_file)) 
}

NAME_BASICS     <- get_imdb_file("name_basics_small")

TITLE_BASICS     <- get_imdb_file("title_basics_small")

TITLE_EPISODES   <- get_imdb_file("title_episodes_small")

TITLE_RATINGS    <- get_imdb_file("title_ratings_small")

TITLE_CREW       <- get_imdb_file("title_crew_small")

TITLE_PRINCIPALS <- get_imdb_file("title_principals_small") 
```

## Data Sub-Sampling

With such a huge dataset, I narrow down to people with at least 2 "known for" credits.

```{r}
NAME_BASICS <- NAME_BASICS |> 
    filter(str_count(knownForTitles, ",") > 1)
```

Then I narrow down titles through rating count. Pictured below is a visualization of the distribution of rating counts across the titles:

```{r echo=FALSE, warning=FALSE, message=FALSE, error=FALSE}

TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30) +
    xlab("Number of IMDB Ratings") + 
    ylab("Number of Titles") + 
    ggtitle("Majority of IMDB Titles Have Less than 100 Ratings") + 
    theme_bw() + 
    scale_x_log10(label = scales::comma) + 
    scale_y_continuous(label = scales::comma)

print(ggplot)
```

About 75% of the dataset is has less than 100 ratings and we can see this through quantile distribution:

```{r, echo=FALSE, warning=FALSE, message=FALSE, error=FALSE}
TITLE_RATINGS |>
    pull(numVotes) |>
    quantile()
```

Through this step, I filter the data to only view titles with 100 or more ratings:

```{r}
TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)
```

This filtering is then applied to the rest of the data tables:

```{r}
#| code-fold: true

TITLE_BASICS <- TITLE_BASICS |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_EPISODES_1 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))
TITLE_EPISODES_2 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(parentTconst == tconst))

TITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,
                            TITLE_EPISODES_2) |>
    distinct()

TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    semi_join(TITLE_RATINGS, join_by(tconst == tconst))


rm(TITLE_EPISODES_1)
rm(TITLE_EPISODES_2)
```

From the IMDb site, I see that columns that should be set as numeric type are set as character (string) vectors. I change this by using the following command:

```{r echo=FALSE, warning=FALSE, message=FALSE, error=FALSE}
# Load dplyr library
library(dplyr)

NAME_BASICS <- NAME_BASICS |>
    mutate(birthYear = as.numeric(birthYear),
           deathYear = as.numeric(deathYear))
```

### Task 1

In Task 1, I will correct the column types of applicable tables, just like with the NAME_BASICS table.

```{r echo=FALSE, warning=FALSE, message=FALSE, error=FALSE}
TITLE_BASICS <- TITLE_BASICS |>
  mutate(
    isAdult = as.logical(isAdult),
    startYear = as.numeric(startYear),    # Coerce
    endYear = as.numeric(endYear), # Coerce 
    runtimeMinutes = as.numeric(runtimeMinutes)
  )

TITLE_EPISODES <- TITLE_EPISODES |>
  mutate(seasonNumber = as.numeric(seasonNumber),
         episodeNumber = as.numeric(episodeNumber))

TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(
    averageRating = as.numeric(averageRating),    # Coerce
    numVotes = as.numeric(numVotes )     # Coerce 
  )
```

Looking through the IMDb dataset details on the site, I found that only TITLE_BASICS and TITLE_RATINGS needed to be corrected.

### Task 2

Using dplyr functionality, I will answer these questions:

#### How many movies are in our data set? How many TV series? How many TV episodes?

```{r}
# Load necessary libraries
library(dplyr)

# Count the number
TITLE_movie <- TITLE_BASICS |>
  filter(titleType == "movie") |>
  summarise(count = n())

TITLE_tvseries <- TITLE_BASICS |>
  filter(titleType == "tvSeries") |>
  summarise(count = n())

TITLE_tvepisode <- TITLE_BASICS |>
  filter(titleType == "tvEpisode") |>
  summarise(count = n())

# Print the result
print(TITLE_movie)
print(TITLE_tvseries)
print(TITLE_tvepisode)
```

*From the filtered datasets, there are 132,220 movies, 29,986 TV series, and 156,725 TV episodes.*

#### Who is the oldest living person in our data set?

```{r}
# Load necessary libraries
library(dplyr)

# Filter for living people (i.e., no deathYear) and select the oldest one by birth year
oldest_living_p <- NAME_BASICS |>
  filter(is.na(deathYear) & !is.na(birthYear)) |>  # Only living people with known birthYear
  arrange(birthYear) |>                             # Sort by birth year (ascending)
  slice(1)                                           # Select the first (oldest) person

# Print the result
print(oldest_living_p |> select(primaryName, birthYear ))
```

*The oldest living person is Traudl Lessing, based on the data table. However, I know that is most definitely not true because she was born in 1625. When I check the [IMDb site](https://www.imdb.com/name/nm3545517/) of Traudl Lessing, I see that it is missing her death date. I will change show the top 20 oldest people. Someone must have entered data incorrectly. This really shows the importance of inputting data.*

```{r}
# Load necessary libraries
library(dplyr)

# Filter for living people (i.e., no deathYear) and select the oldest one by birth year
oldest_living_p <- NAME_BASICS |>
  filter(is.na(deathYear) & !is.na(birthYear)) |>  # Only living people with known birthYear
  arrange(birthYear) |>                             # Sort by birth year (ascending)
  head(20)                                         # Select the top 3 (oldest) person

# Print the result
print(oldest_living_p |> select(primaryName, birthYear ))
```

*Unfortunately, the top 20 "oldest living" people based on the dataset of NAME_BASICS are all incorrect. To answer the question simply based on the data, it would be Traudl Lessing but I would need the deathYear inputted to all celebrities in order to answer the question.*

#### There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?

```{r}
library(dplyr)

# Filter the ratings dataset for titles with a perfect 10/10 rating and at least 200,000 votes
perfect_episodes <- TITLE_RATINGS |>
  filter(averageRating == 10, numVotes >= 200000)

# Join with the basics data to get more information about TV episodes
perfect_tv_episode <- perfect_episodes |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  filter(titleType == "tvEpisode")

# Join with the episode dataset to find the series name
perfect_tv_episode_show <- perfect_tv_episode |>
  left_join(TITLE_EPISODES, by = "tconst") |>
  left_join(TITLE_BASICS, by = join_by(parentTconst == tconst), suffix = c("_episode", "_series"))

# Print the episode title and its parent series title
perfect_tv_episode_show |>
  select(primaryTitle_episode, primaryTitle_series) |>
  print()

```

*It is episode Ozymandias from Breaking Bad.*

#### What four projects is the actor Mark Hamill most known for?

```{r}
# Find Mark Hamill's entry using his name and extract his 'knownForTitles'
mark_hamill <- NAME_BASICS|>
  filter(primaryName == "Mark Hamill") |>
  select(nconst, knownForTitles)

# Split the knownForTitles (which is a comma-separated string) into individual tconsts
known_titles <- unlist(strsplit(mark_hamill$knownForTitles, ","))

# Filter the title.basics data to get information about Mark Hamill's "known for" titles
mark_hamill_known_for <- TITLE_BASICS|>
  filter(tconst %in% known_titles) |>
  select(primaryTitle, titleType)

# Print the result
print(mark_hamill_known_for)
```

*Mark Hamill is most known for his roles in Star Wars!*

#### What TV series, with more than 12 episodes, has the highest average rating?

```{r}

# Filter for TV episodes and join with episode details (parentTconst)
tv_episodes <- TITLE_EPISODES|>
  inner_join(TITLE_BASICS, by = c("tconst" = "tconst")) |>
  filter(titleType == "tvEpisode") |>
  select(tconst, parentTconst)

# Count the number of episodes per series
series_episode_counts <- tv_episodes|>
  group_by(parentTconst) |>
  summarise(episode_count = n()) |>
  filter(episode_count > 12)  # Filter for series with more than 12 episodes

# Calculate the average rating for each series based on episode ratings
series_avg_rating <- tv_episodes|>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  inner_join(series_episode_counts, by = "parentTconst") |>
  group_by(parentTconst) |>
  summarise(average_series_rating = mean(averageRating, na.rm = TRUE))|>
  arrange(desc(average_series_rating))  # Sort by highest average rating

# Join with the basics dataset to get series titles
top_rated_series <- series_avg_rating|>
  inner_join(TITLE_BASICS, by = c("parentTconst" = "tconst")) |>
  select(primaryTitle, average_series_rating) |>
  slice(1)  # Get the series with the highest average rating

# Print the result
print(top_rated_series)
```

*The Kayva TV series has the highest average rating of 9.75.*

#### The TV series Happy Days (1974-1984) gives us the common idiom “jump the shark”. The phrase comes from a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and rapidly looses quality. Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?

```{r, message = FALSE, warning = FALSE}
library(dplyr)

# Find the tconst for Happy Days
happy_days_series <- TITLE_BASICS |>
  filter(primaryTitle == "Happy Days" & titleType == "tvSeries") |>
  select(tconst)

# Filter for Happy Days episodes from title_episode
happy_days_episodes <- TITLE_EPISODES |>
  filter(parentTconst == happy_days_series$tconst)  |>
  select(tconst, seasonNumber, episodeNumber)
```

I have selected the columns I am looking at. I will put it into a visualization to answer the questions.

```{r}
library(ggplot2)

# Join with ratings data to get episode ratings
happy_days_ratings <- happy_days_episodes |>
  inner_join(TITLE_RATINGS, by = "tconst")  |>
  filter(!is.na(seasonNumber))  # Exclude episodes without season information

# Define early seasons (1-5) and later seasons (6 and beyond)
happy_days_ratings <- happy_days_ratings |>
  mutate(season_group = ifelse(seasonNumber <= 5, "Early Seasons (1-5)", "Later Seasons (6+)"))

# Calculate the average rating for early and later seasons
season_group_avg <- happy_days_ratings |>
  group_by(season_group) |>
  summarise(average_rating = mean(averageRating, na.rm = TRUE),
            episode_count = n())

# Print the average ratings for early and later seasons
print(season_group_avg)

# Plot average ratings of early vs later seasons
ggplot(season_group_avg, aes(x = season_group, y = average_rating, fill = season_group)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Ratings: Early vs Later Seasons of Happy Days",
       x = "Season Group",
       y = "Average Rating") +
  theme_minimal()
```

*Based on the histogram, yes, it is true that the ratings of Happy Days got lower as the show progressed.*

## Quantifying Success

A "success" measure that reflects both quality and popular awareness will include average ratings and number of votes. A common approach is to compute a weighted score of both of these factors so it looks like `success = averageRating x log(numVotes)`

## Task 3

#### Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.

```{r}

# Create a success metric
TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(success_metric = averageRating * log(numVotes))

top_movies <- TITLE_RATINGS |>
  arrange(desc(success_metric))  |>
  slice(1:10)  # Select the top 10 movies based on the success metric

# Join with the basics dataset to get movie titles for validation
top_movies_with_titles <- top_movies |>
  inner_join(TITLE_BASICS, by = "tconst")  |>
  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info

# Print the top movies with titles and success metric
print(top_movies_with_titles %>% select(primaryTitle, success_metric))
```

#### Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.

```{r}

# Filter for movies with large numbers of votes and low success metric. Assuming 'large' is more than 100,000 votes
low_success_movies <- TITLE_RATINGS |>
  filter(numVotes > 100000)  |>
  arrange(success_metric)  |>
  slice(1:5)  # Select the bottom 5 movies with poor success metric

# Join with title.basics to get the titles for validation
low_success_movies_with_titles <- low_success_movies %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info

# Print the bottom 5 movies with titles and metrics
print(low_success_movies_with_titles)
```

#### Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.

The last movie I went to see in theaters was Christopher Nolan's *Oppenheimer*. I will pick him as a prestige director for this example.

```{r, message = FALSE, warning = FALSE}

# Find the nconst for Christopher Nolan
nolan <- NAME_BASICS |>
  filter(primaryName == "Christopher Nolan") |>
  select(nconst)

# Find all projects where Christopher Nolan is the director
nolan_projects <- TITLE_PRINCIPALS|>
  filter(nconst == nolan$nconst, category == "director") |>
  select(tconst)
```

I found Christopher Nolan within the Name table and Principals title. Now I will join them the success metric in the ratings table then join with title_basic to get project titles.

```{r}
# Join Nolan's projects with the ratings data to calculate success metrics
nolan_projects_ratings <- nolan_projects|>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric

# Join with the basics dataset to get project titles
nolan_projects_with_titles <- nolan_projects_ratings |>
  inner_join(TITLE_BASICS, by = "tconst")|>
  select(primaryTitle, averageRating, numVotes, success_metric) |>
  arrange(desc(success_metric))  # Sort by highest 

print(nolan_projects_with_titles)
```

#### Perform at least one other form of ‘spot check’ validation.

One more "spot check" can be to see if Oscar-winning movies have a high success score. I looked up some movies to manually input into the code to check.

```{r}
# List of famous Oscar-winning movies (Best Picture winners)
oscar_winners <- c("The Godfather", "Schindler's List", "The Silence of the Lambs", 
                   "Forrest Gump", "Gladiator", "No Country for Old Men", "Parasite")

# Filter the IMDb basics dataset to find tconsts of these movies
oscar_winner_movies <- TITLE_BASICS |>
  filter(primaryTitle %in% oscar_winners) |>
  select(tconst, primaryTitle)

# Join with the ratings data to get the success metric for these movies
oscar_winner_ratings <- oscar_winner_movies |>
  inner_join(TITLE_RATINGS, by = "tconst")  |>
  mutate(success_metric = averageRating * log(numVotes + 1))

# Display the results to validate if these Oscar-winning movies score highly
oscar_winner_ratings |>
  select(primaryTitle, averageRating, numVotes, success_metric)  |>
  arrange(desc(success_metric))  |>
  print()
```

A numerical threshold of what "success" means for a project can be picked by looking at the quantile distribution of ratings across all movies.

```{r}

# Step 1: Inspect the distribution of the success metric
summary(TITLE_RATINGS$success_metric)

# Step 2: Determine the 75th percentile (or another quantile) as the threshold for a 'solid' movie
threshold <- quantile(TITLE_RATINGS$success_metric, 0.75)

# Print the threshold value
print(paste("Threshold for a 'solid' movie: ", threshold))
```

## Task 4

Now, it is time to pick a genre for my movie. For research, I am looking at a couple questions. My first question is **What was the genre with the most “successes” in each decade?**

```{r}
library(tidyr)

successful_movies <- TITLE_RATINGS %>%
  filter(success_metric > threshold)

# Join with imdb_basics to get genre and year information
successful_movies_with_genres <- successful_movies %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(!is.na(startYear))  # Ensure the movie has a valid start year

# Create a new column for the decade
successful_movies_with_genres <- successful_movies_with_genres %>%
  mutate(decade = floor(as.numeric(startYear) / 10) * 10)  # Convert year to decade

# Separate genres (if multiple genres are in a single string)
successful_movies_with_genres <- successful_movies_with_genres %>%
  separate_rows(genres, sep = ",")  # Separate genres into individual rows if comma-separated

# Group by decade and genre, then count the number of successes per genre in each decade
genre_counts_by_decade <- successful_movies_with_genres %>%
  group_by(decade, genres) %>%
  summarise(success_count = n()) %>%
  arrange(decade, desc(success_count))

# Find the genre with the most successes in each decade
most_successful_genres_per_decade <- genre_counts_by_decade %>%
  group_by(decade) %>%
  slice_max(success_count, n = 1)  # Get the genre with the highest count per decade

# Print the most successful genre for each decade
print(most_successful_genres_per_decade)
```

```{r}

# Plotting the most successful genres per decade
ggplot(most_successful_genres_per_decade, aes(x = factor(decade), y = success_count, fill = genres)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Most Successful Genres Per Decade",
       x = "Decade",
       y = "Number of Successful Movies",
       fill = "Genre") +
  theme_minimal()
```

My next set of questions are **What genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?**

```{r}
# Filter for movies produced since 2010 and for successes
successful_movies_since_2010 <- TITLE_RATINGS %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  filter(as.numeric(startYear) >= 2010) %>%  # Movies from 2010 onwards
  filter(success_metric > threshold)  # Only successful movies

# Step 3: Separate genres (in case of multiple genres in a single string)
successful_movies_since_2010 <- successful_movies_since_2010 %>%
  separate_rows(genres, sep = ",")

# Step 4: Count the number of successes per genre
genre_success_count <- successful_movies_since_2010 %>%
  group_by(genres) %>%
  summarise(success_count = n()) %>%
  arrange(desc(success_count))

# Step 5: Calculate the total number of productions per genre since 2010
total_movies_per_genre <- TITLE_BASICS %>%
  filter(as.numeric(startYear) >= 2010) %>%
  separate_rows(genres, sep = ",") %>%
  group_by(genres) %>%
  summarise(total_count = n())

# Step 6: Join the success count with the total production count and calculate success rate
genre_success_rate <- genre_success_count %>%
  inner_join(total_movies_per_genre, by = "genres") %>%
  mutate(success_rate = success_count / total_count) %>%
  arrange(desc(success_rate))

# Step 7: Print the genre with the most successes and the success rate
print(genre_success_rate)
ggplot(genre_success_rate, aes(x = success_count, y = success_rate, label = genres)) +
  geom_point(color = "blue", size = 3) +
  geom_text(vjust = -1, size = 3) +  # Add genre labels to the points
  labs(title = "Success Rate vs Number of Successes (2010 onwards)",
       x = "Number of Successes",
       y = "Success Rate") +
  theme_minimal()
```

Through this, I see that drama is still the number one genre to choose, but action, crime, adventure, and comedy are also good genres to pick with high success rate and high success count.

With this, I will choose the genre drama! IMDb's \[definition\]\[https://help.imdb.com/article/contribution/titles/genres/GZDRMS6R742JRGAG#\] of drama is "numerous consecutive scenes of characters portrayed to effect a serious narrative throughout the title, usually involving conflicts and emotions. This can be exaggerated upon to produce melodrama." Some examples of subgenres under this category are coming-of-age, historical epic, medical drama, and psychological drama. Quite a bit of subgenres are set under this genre!

Particularly, I am interested in the subgenre Epic, described as "grand and sweeping stories often set against significant historical, cultural, or societal backdrops. Epic dramas are characterized by their scope, scale, and often lengthy runtime, as they aim to capture the grandeur of human experiences, events, and emotions."

## Successful Personnel in the Genre

## Task 5 Key Personnel

Based on my interest in pursuing a drama movie, set in the subgenre epic, I would like to create a team with Christopher Nolan as the director. He has experience in creating drama movies that are "successful".

```{r}

# Join Christopher Nolan's projects with the title.basics dataset to get genres
nolan_projects_with_genres <- nolan_projects %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  separate_rows(genres, sep = ",") %>%
  filter(genres == "Drama")  # Filter for drama movies

# Join with the ratings dataset to calculate success metrics for drama movies
nolan_drama_success <- nolan_projects_with_genres %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  mutate(success_metric = averageRating * log(numVotes + 1))  # Calculate success metric

# Print Christopher Nolan's drama movies based on success metric
cat("Christopher Nolan's Successful Drama Movies:\n")
print(nolan_drama_success %>%
  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %>%
  arrange(desc(success_metric)))
```

An established actor I would like to add to the team is Leonardo DiCaprio. Not only is he but he has worked on projects with Christopher Nolan in the past.

```{r}

library(gt)

# Find Leonardo DiCaprio's nconst (unique identifier for individuals)
leonardo <- NAME_BASICS %>%
  filter(primaryName == "Leonardo DiCaprio") %>%
  select(nconst)

# Get all projects where Leonardo DiCaprio is an actor
leonardo_projects <- TITLE_PRINCIPALS %>%
  filter(nconst == leonardo$nconst, category == "actor") %>%
  select(tconst)

# Join Leonardo DiCaprio's projects with the ratings data to calculate success metrics
leonardo_ratings <- leonardo_projects %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation

# Join with title.basics to get the titles and release years for validation
leonardo_success <- leonardo_ratings %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %>%
  arrange(desc(success_metric))

leonardo_success %>%
  gt() %>%
  tab_header(
    title = "Leonardo DiCaprio's Top Movies by Success Metric"
  )
```

This table proves that Leonardo DiCaprio is a great actor! An up and coming actor that I would like to bring is Timothée Chalamet. His most recent work is Dune, an American epic science fiction film based off the book series, Dune.

```{r}
# Step 2: Find Timothée Chalamet's nconst (unique identifier for individuals)
timothee <- NAME_BASICS %>%
  filter(primaryName == "Timothée Chalamet") %>%
  select(nconst)

# Step 3: Get all projects where Timothée Chalamet is an actor
timothee_projects <- TITLE_PRINCIPALS %>%
  filter(nconst == timothee$nconst, category == "actor") %>%
  select(tconst)

# Step 4: Join Timothée Chalamet's projects with the ratings data to calculate success metrics
timothee_ratings <- timothee_projects %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation

# Step 5: Join with title.basics to get the titles and release years for validation
timothee_success <- timothee_ratings %>%
  inner_join(TITLE_BASICS, by = "tconst") %>%
  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %>%
  arrange(desc(success_metric))

timothee_success %>%
  gt() %>%
  tab_header(
    title = "Timothée Chalamet's Top Movies by Success Metric"
  )
```

Surprisingly, I did not know that Timothée Chamalet was also in a Christopher Nolan project. With 11 movies above the success threshold, I think Timothée will be a great addition to the team.

## Nostalgia and Remakes

## Task 6 Finding a Classic Movie to Remake

Of course, now it is time to create a killer plot. One way is to look at and remake a classic film. The criteria for a classic film is as follows: \* large number of IMDb ratings \>100,000 \* high average rating \>8 \* have not been remade in the past 25 years

```{r}
# Filter for movies released before 1999 (at least 25 years old)
classic_movies <- TITLE_BASICS %>%
  filter(titleType == "movie" & as.numeric(startYear) < 1999)

# Join with ratings data to find movies with high ratings and large number of votes
classic_movies_with_ratings <- classic_movies %>%
  inner_join(TITLE_RATINGS, by = "tconst") %>%
  filter(numVotes > 100000 & averageRating > 8.5)  # Filter for high votes and high ratings

#  Sort by highest average rating and number of votes to find top movies
top_classic_movies <- classic_movies_with_ratings %>%
  arrange(desc(averageRating), desc(numVotes))

# Step 5: Exclude movies that have been remade in the past 25 years
remade_movies <- TITLE_BASICS %>%
  filter(titleType == "remake" & as.numeric(startYear) >= 1999)

# Filter out remade movies from top classic movies
classic_movies_to_remake <- top_classic_movies %>%
  filter(!tconst %in% remade_movies$tconst)

classic_movies_to_remake |>
  select(primaryTitle, startYear, averageRating, numVotes) |>
  gt() |>
  tab_header(title = "Top Classic Movies to Remake")
```

From the list, I would like to remake *Schindler's List*, a movie based during World War II. Since the movie was made in 1993, I believe most of the cast is still around.

```{r}
# Find the tconst for Schindler's List
schindlers_list <- TITLE_BASICS %>%
  filter(primaryTitle == "Schindler's List" & titleType == "movie") %>%
  select(tconst)

# Get key talent (actors, directors, writers) from Schindler's List
key_talent <- TITLE_PRINCIPALS %>%
  filter(tconst == schindlers_list$tconst & category %in% c("actor", "director", "writer")) %>%
  select(nconst, category)

# Step 4: Join with the name.basics dataset to check if they are still alive
key_talent_info <- key_talent %>%
  inner_join(NAME_BASICS, by = "nconst") %>%
  select(primaryName, category, birthYear, deathYear)  # Select relevant info

# Step 5: Filter for those who are still alive (deathYear is NA)
still_alive <- key_talent_info %>%
  filter(is.na(deathYear))

still_alive |>
  gt() |>
  tab_header(title = "Key talent from Schindler's List - Still Alive")
```

## The Pitch

Through the decades, drama films have been increasing in popularity, completely dominating all other genres in the industry with 32,460 movies made since 2010. Combined with other competing genres of adventure, crime, action, and comedy, I would like to create an epic drama.

This movie will be directed by Christopher Nolan, an expert at drama movies. With 6 movies in the drama genre, all are above the success metric of 49.02. Alongside director Nolan, I would like to bring on Leonardo DiCaprio, a Hollywood icon who has played various roles throughout his career. Another actor I would like to bring in is Timothee Chalamet who played in Dune, an epic science fiction movie. With Chalamet’s background, he would fit this new movie concept very well. One fun fact is that both actors have worked with director Nolan separately before, on *Inception* and *Interstellar*.

The story will be based of off *Schindler’s List*, a 1993 film set in World War II taken from a true story of Oskar Schindler The film focuses on his transformation from a business man to a humanitarian through the factory he runs. This story will captivate today's audience, as we are continually surrounded by global conflicts.

> From director Christopher Nolan, the visionary mind between *Oppenheimer*,\
> From actor Leonardo DiCaprio, a Hollywood icon,\
> From actor Timothee Chalamet, the star of *Dune* movie series,\
> Comes a rich historical drama\
> A story of war, love, will power, and humanity\
> Coming soon to a theater near you.

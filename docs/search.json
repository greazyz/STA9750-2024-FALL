[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gracie Zheng",
    "section": "",
    "text": "Enrolled in the MS Statistics program at the Zicklin School of Business, I am graduating in May 2026.\nI currently work at my family restaurant alongside my mom.\nI am ambidextrous; I use chopsticks on my right hand and do everything else with my left hand.\nI am really good at Tetris."
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "mp01",
    "section": "",
    "text": "In this mini project, I will be analyzing the fiscal characteristics of public transit systems in the United States through summary statistics and coming to the conclusion of which is the most efficient transit system.\nGiven the data, I am downloading the files and cleaning and joining the fares and expenses tables.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`) |&gt;\n  group_by(`NTD ID`,       \n           `Agency Name`,  \n           `Mode`) |&gt;      \n  summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency Name'. You can override\nusing the `.groups` argument.\n\n# expenses file \n\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nRows: 3744 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): Agency, City, State, NTD ID, Organization Type, Reporter Type, UZA...\ndbl  (2): Report Year, UACE Code\nnum (10): Primary UZA Population, Agency VOMS, Mode VOMS, Vehicle Operations...\nlgl  (7): Vehicle Operations Questionable, Vehicle Maintenance Questionable,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'NTD ID'. You can override using the `.groups` argument.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\nThe third file is the monthly transit numbers.\n\nlibrary(tidyverse)\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\n\n\n\n\n\nif(!require(\"DT\")) install.packages(\"DT\")\n\nLoading required package: DT\n\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\n\n\n\n\nFirst, I am renaming the “UZA Name” column to “metro_area”.\n\nUSAGE &lt;- USAGE |&gt;\n       rename(metro_area = `UZA Name`)\n\n\n\n\n\nunique_modes &lt;- USAGE |&gt; \n  distinct(Mode)\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))\n\nThen I reload the table with this code to make it look neater:\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n \ndatatable(\n    sample_n(USAGE, 1000) |&gt;\n      mutate(month = as.character(month)) |&gt;\n      select(-`3 Mode`) |&gt;\n      rename(\n        `Metro Area` = metro_area,\n        `Unlinked Passenger Trips` = UPT,\n        `Vehicle Revenue Miles` = VRM\n      )\n)\n\n\n\n\n\n\n\n\n\nWhat transit agency had the most total VRM in our data set?\n\n\n  most_vrm_agency &lt;- USAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_vrm = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_vrm)) |&gt;\n  slice(1)\nprint (most_vrm_agency)\n\n# A tibble: 1 × 2\n  Agency                      total_vrm\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\nThe MTA New York City Transit had the most total VRM at 10832855350 miles.\n\nWhat transit mode had the most total VRM in our data set?\n\n\n  most_vrm_mode &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_vrm = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_vrm)) |&gt;\n  slice(1)\nprint (most_vrm_mode)\n\n# A tibble: 1 × 2\n  Mode    total_vrm\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\nBus mode had the most total VRM at 49444494088.\n\nHow many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\n\nnyc_subway_trips_may_2024 &lt;- USAGE |&gt;\n  filter(Mode == \"Heavy Rail\", \n         Agency == \"MTA New York City Transit\",\n         month == \"2024-05-01\")\nprint(nyc_subway_trips_may_2024)\n\n# A tibble: 1 × 8\n  `NTD ID` Agency             metro_area Mode  `3 Mode` month         UPT    VRM\n     &lt;int&gt; &lt;chr&gt;              &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;    &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n1    20008 MTA New York City… New York-… Heav… Rail     2024-05-01 1.80e8 3.00e7\n\n\n\nHow much did NYC subway ridership fall between April 2019 and April 2020?\n\n\napril_fall &lt;- USAGE |&gt; \n  filter(\n    Mode == \"Heavy Rail\",    # Focus on subway (Heavy Rail)\n    Agency == \"MTA New York City Transit\", \n    month %in% c(\"2019-04-01\", \"2020-04-01\")  # Only April 2019 and April 2020\n  ) |&gt; \n  group_by(month) |&gt;       # Group by month\n  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |&gt;   # Summarize total UPT for each month\n  spread(month, total_UPT) |&gt;   # Spread the month column to calculate difference\n  mutate(april_fall = `2019-04-01` - `2020-04-01`)  # Calculate ridership fall\nprint(april_fall)\n\n# A tibble: 1 × 3\n  `2019-04-01` `2020-04-01` april_fall\n         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n1    232223929     20254269  211969660\n\n\n\n\n\n\nWhich 3 Metro Areas have the lowest amount of Vehicle Revenue Miles?\n\n\nleast3_vrm_metro &lt;- USAGE |&gt; \n  group_by(metro_area) |&gt; \n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt; \n  arrange(total_VRM) |&gt; \n  slice(3)\nprint(least3_vrm_metro)\n\n# A tibble: 1 × 2\n  metro_area        total_VRM\n  &lt;chr&gt;                 &lt;dbl&gt;\n1 Texarkana, TX--AR    262979\n\n\n\nWhich Metro Area Had the Highest Vehicle Revenue Miles (VRM) per Trip?\n\nThis question is aimed to find the metro area that covers the most distance per rider.\n\nvrm_per_trip_metro &lt;- USAGE |&gt; \n  group_by(metro_area) |&gt; \n  summarize(total_VRM = sum(VRM, na.rm = TRUE), \n            total_UPT = sum(UPT, na.rm = TRUE)) |&gt; \n  mutate(vrm_per_trip = total_VRM / total_UPT) |&gt; \n  arrange(desc(vrm_per_trip)) |&gt; \n  slice(1)\nprint(vrm_per_trip_metro)\n\n# A tibble: 1 × 4\n  metro_area     total_VRM total_UPT vrm_per_trip\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 Morristown, TN   4386584    261196         16.8\n\n\n\nWhich Agency is busiest in December?\n\n\nbusiest_agency_december &lt;- USAGE |&gt; \n  filter(format(as.Date(month), \"%m\") == \"12\") |&gt;  # Filter for December\n  group_by(Agency) |&gt; \n  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |&gt; \n  arrange(desc(total_UPT)) |&gt; \n  slice(1)\nprint(busiest_agency_december)\n\n# A tibble: 1 × 2\n  Agency                     total_UPT\n  &lt;chr&gt;                          &lt;dbl&gt;\n1 MTA New York City Transit 5630067938\n\n\nI am not sure what I was expecting, but it was not New York. I had a belief that people would go back home to see their family; I forgot about tourism and that the ridership is NYC is extremely high at all times of the year.\n\n\n\n\nusage_2022_annual &lt;- USAGE |&gt;\nfilter(year(month) == \"2022\") |&gt;\n  group_by(\n    `NTD ID`,\n    Agency,\n    metro_area,\n    Mode) |&gt;\n  summarise(\n    Total_VRM = sum(VRM, na.rm = TRUE),\n    Total_UPT = sum(UPT, na.rm = TRUE),\n    .groups = 'drop'\n  ) |&gt;\n  ungroup()\nprint(usage_2022_annual)\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                          metro_area Mode  Total_VRM Total_UPT\n      &lt;int&gt; &lt;chr&gt;                           &lt;chr&gt;      &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1        1 King County                     Seattle--… Bus    61632644  53983641\n 2        1 King County                     Seattle--… Dema…  12860448    663009\n 3        1 King County                     Seattle--… Ferr…     51236    400407\n 4        1 King County                     Seattle--… Stre…    180369   1117605\n 5        1 King County                     Seattle--… Trol…   2635705   9575043\n 6        1 King County                     Seattle--… Vanp…   4413910    702709\n 7        2 Spokane Transit Authority       Spokane, … Bus     6485325   6595319\n 8        2 Spokane Transit Authority       Spokane, … Dema…   4037502    310316\n 9        2 Spokane Transit Authority       Spokane, … Vanp…    905990     90576\n10        3 Pierce County Transportation B… Seattle--… Bus     4227441   4950296\n# ℹ 1,131 more rows\n\n\nRecall the FINANCIALS table we created in the beginning I am also renaming the modes for financials so it shows in the table.\n\nprint(FINANCIALS)\n\n# A tibble: 1,173 × 5\n   `NTD ID` `Agency Name`                           Mode  `Total Fares` Expenses\n      &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1        1 King County Department of Metro Transit CB          5216912   0     \n 2        1 King County Department of Metro Transit DR           832327   6.05e7\n 3        1 King County Department of Metro Transit FB          1715265   8.90e6\n 4        1 King County Department of Metro Transit LR         29386480   0     \n 5        1 King County Department of Metro Transit MB         56846337   6.72e8\n 6        1 King County Department of Metro Transit SR           588495   1.25e7\n 7        1 King County Department of Metro Transit TB         10123486   8.42e7\n 8        1 King County Department of Metro Transit VP          5484481   8.91e6\n 9        2 Spokane Transit Authority               DR           531284   1.80e7\n10        2 Spokane Transit Authority               MB          6135110   7.53e7\n# ℹ 1,163 more rows\n\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail and Automated Guideway modes\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramways\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\nFollowing this code, the two tables are merged:\n\nUSAGE_AND_FINANCIALS &lt;- left_join(usage_2022_annual, \n           FINANCIALS, \n           join_by(`NTD ID`, Mode)) |&gt;\n    drop_na()\n\nLet’s show the first 1,000!\n\nsample_n(USAGE_AND_FINANCIALS, 1000) \n\n# A tibble: 1,000 × 9\n   `NTD ID` Agency            metro_area Mode  Total_VRM Total_UPT `Agency Name`\n      &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;      &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;        \n 1    90196 County of Placer  Sacrament… Comm…      3944      1054 County of Pl…\n 2       44 Skagit Transit    Mount Ver… Dema…    374842     53400 Skagit Trans…\n 3    40035 Central Florida … Orlando, … Dema…   7557232    585706 Central Flor…\n 4    40108 Research Triangl… Durham, NC Dema…    416124     35595 Research Tri…\n 5    20075 Port Authority T… Philadelp… Heav…   4868978   4870310 Port Authori…\n 6    50035 Central County T… Kalamazoo… Dema…    877697    114323 Central Coun…\n 7    90234 Marin County Tra… San Franc… Dema…    421668     49975 Marin County…\n 8    50166 Clermont County,… Cincinnat… Bus      119799     11964 Board of  Cl…\n 9    30202 South Central Tr… Lancaster… Dema…   4415050    313723 South Centra…\n10    50045 Gary Public Tran… Chicago, … Bus      788671    371256 Gary Public …\n# ℹ 990 more rows\n# ℹ 2 more variables: `Total Fares` &lt;dbl&gt;, Expenses &lt;dbl&gt;\n\n\n\n\n\nWhich transit system (agency and mode) had the most UPT in 2022?\n\nmost_upt_2022 &lt;- USAGE_AND_FINANCIALS |&gt;\n     group_by(Agency, Mode) |&gt;\n     filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n     summarise(UPT = sum(Total_UPT),  .groups = 'drop') |&gt;\n     arrange(desc(UPT)) |&gt;\n     slice(1)\nprint(most_upt_2022)\n\n# A tibble: 1 × 3\n  Agency                    Mode              UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n\nThe subway of the MTA New York City Transit system had the most UPT in 2022 at 1,793,073,801.\nWhich transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\n\nhighest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(farebox_recovery = `Total Fares` / Expenses) |&gt;\n  arrange(desc(farebox_recovery)) |&gt;\n  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |&gt; #to be able to see the desired column in my code\n  slice(1)\n\nprint(highest_farebox_recovery)\n\n# A tibble: 1 × 7\n  `NTD ID` Agency       metro_area Mode  `Total Fares` Expenses farebox_recovery\n     &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n1    40191 Transit Aut… Elizabeth… Vanp…         97300    40801             2.38\n\n\nIn 2022, vanpooling of the Transit Authority of Central Kentucky had the highest farebox recovery at 2.38.\nWhich transit system (agency and mode) has the lowest expenses per UPT?\n\nlowest_expenses_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_upt = Expenses / Total_UPT) |&gt;\n  arrange(expenses_per_upt) |&gt;\n  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |&gt; #to be able to see the desired column in my code\n  slice(1)\n\nprint(lowest_expenses_per_upt)\n\n# A tibble: 1 × 7\n  `NTD ID` Agency       metro_area Mode  `Total Fares` Expenses expenses_per_upt\n     &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n1    40147 North Carol… Raleigh, … Bus               0  2727412             1.18\n\n\nThe transit system with the lowest expenses per UPT is the North Carolina State University bus with expenses per UPT at $1.18.\nWhich transit system (agency and mode) has the highest total fares per UPT?\n\nhighest_fares_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_upt = `Total Fares` / Total_UPT) |&gt;\n  arrange(desc(fares_per_upt)) |&gt;\n  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |&gt; #to be able to see the desired column in my code\n  slice(1)\n\nprint(highest_fares_per_upt)\n\n# A tibble: 1 × 7\n  `NTD ID` Agency          metro_area Mode  `Total Fares` Expenses fares_per_upt\n     &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;         &lt;dbl&gt;\n1    30011 Altoona Metro … Altoona, … Dema…         17163    90550          660.\n\n\nIn 2022, the highest total fares per UPT is at the Altoona Metro Transit by Demand Response.\nWhich transit system (agency and mode) has the lowest expenses per VRM?\n\nlowest_expenses_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_vrm = Expenses / Total_VRM) |&gt;\n  arrange(expenses_per_vrm) |&gt;\n  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |&gt; #to be able to see the desired column in my code\n  slice(1)\n\nprint(lowest_expenses_per_vrm)\n\n# A tibble: 1 × 7\n  `NTD ID` Agency       metro_area Mode  `Total Fares` Expenses expenses_per_vrm\n     &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;\n1    66339 New Mexico … Las Cruce… Vanp…        757574   588830            0.337\n\n\nNew Mexico Department of Transportation’s vanpooling system has the lowest expenses per VRM at 0.337.\nWhich transit system (agency and mode) has the highest total fares per VRM?\n\nhighest_fares_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_vrm = `Total Fares` / Total_VRM) |&gt;\n  arrange(desc(fares_per_vrm)) |&gt;\n  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |&gt; #to be able to see the desired column in my code\n  slice(1)\n\nprint(highest_fares_per_vrm)\n\n# A tibble: 1 × 7\n  `NTD ID` Agency          metro_area Mode  `Total Fares` Expenses fares_per_vrm\n     &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;         &lt;dbl&gt;\n1    50521 Chicago Water … Chicago, … Ferr…        142473   211296          237.\n\n\nAt $237, the Chicago Water Taxi’s ferry has the highest total fares per VRM.\n\n\n\nThe most efficient transit system would be the MTA New York Transit System as it moves the most amount of passengers from one destination to another. I am viewing the term “efficiency” as being able to serve the most amount of people with its given size."
  },
  {
    "objectID": "mp01.html#conclusion",
    "href": "mp01.html#conclusion",
    "title": "mp01",
    "section": "",
    "text": "The most efficient transit system would be the MTA New York Transit System as it moves the most amount of passengers from one destination to another. I am viewing the term “efficiency” as being able to serve the most amount of people with its given size."
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "The Business of Show Business",
    "section": "",
    "text": "As a Hollywood development director, I am always looking into the next BIG thing. To make the biggest movie of 2025 and be invited to Cannes Film Festival, I will dive into the data of movies to find the perfect opportunity.\n\n\nCredits to IMDb, with their expansive library of movies, I will use their datasets for my research. The code to extract the data is as follows:\n\n#libraries \nlibrary(stringr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(gt)\n\nget_imdb_file &lt;- function(fname) {\n  BASE_URL &lt;- \"https://github.com/michaelweylandt/STA9750/raw/main/miniprojects/mini02_preprocessed/\"\n  fname_ext &lt;- paste0(fname, \".csv.zip\")\n  \n  if (!file.exists(fname_ext)) {\n    FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n    download.file(FILE_URL, destfile = fname_ext)\n  }\n  \n  # Unzip the file and read the CSV\n  temp_file &lt;- unzip(fname_ext, list = TRUE)$Name[1]  # Get the name of the first file inside the ZIP\n  unzip(fname_ext)  # Unzip the file\n  as.data.frame(readr::read_csv(temp_file)) \n}\n\nNAME_BASICS     &lt;- get_imdb_file(\"name_basics_small\")\n\nTITLE_BASICS     &lt;- get_imdb_file(\"title_basics_small\")\n\nTITLE_EPISODES   &lt;- get_imdb_file(\"title_episodes_small\")\n\nTITLE_RATINGS    &lt;- get_imdb_file(\"title_ratings_small\")\n\nTITLE_CREW       &lt;- get_imdb_file(\"title_crew_small\")\n\nTITLE_PRINCIPALS &lt;- get_imdb_file(\"title_principals_small\") \n\n\n\n\nWith such a huge dataset, I narrow down to people with at least 2 “known for” credits.\n\nNAME_BASICS &lt;- NAME_BASICS |&gt; \n    filter(str_count(knownForTitles, \",\") &gt; 1)\n\nThen I narrow down titles through rating count. Pictured below is a visualization of the distribution of rating counts across the titles:\n\n\n\n\n\n\n\n\n\nAbout 75% of the dataset is has less than 100 ratings and we can see this through quantile distribution:\n\n\n     0%     25%     50%     75%    100% \n    100     165     332     970 2942823 \n\n\nThrough this step, I filter the data to only view titles with 100 or more ratings:\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n    filter(numVotes &gt;= 100)\n\nThis filtering is then applied to the rest of the data tables:\n\n\nCode\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(parentTconst == tconst))\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |&gt;\n    distinct()\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n    semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n\n\nFrom the IMDb site, I see that columns that should be set as numeric type are set as character (string) vectors. I change this by using the following command:\n\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\n\n\nIn Task 1, I will correct the column types of applicable tables, just like with the NAME_BASICS table.\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n  mutate(\n    isAdult = as.logical(isAdult),\n    startYear = as.numeric(startYear),    # Coerce\n    endYear = as.numeric(endYear), # Coerce \n    runtimeMinutes = as.numeric(runtimeMinutes)\n  )\n\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt;\n  mutate(seasonNumber = as.numeric(seasonNumber),\n         episodeNumber = as.numeric(episodeNumber))\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  mutate(\n    averageRating = as.numeric(averageRating),    # Coerce\n    numVotes = as.numeric(numVotes )     # Coerce \n  )\n\nLooking through the IMDb dataset details on the site, I found that only TITLE_BASICS and TITLE_RATINGS needed to be corrected.\n\n\n\nUsing dplyr functionality, I will answer these questions:\n\n\n\n\nCode\n# Count the number\nTITLE_movie &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\") |&gt;\n  summarise(count = n())\n\nTITLE_tvseries &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  summarise(count = n())\n\nTITLE_tvepisode &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  summarise(count = n())\n\nprint(TITLE_movie)\n\n\n   count\n1 131662\n\n\nCode\nprint(TITLE_tvseries)\n\n\n  count\n1 29789\n\n\nCode\nprint(TITLE_tvepisode)\n\n\n   count\n1 155722\n\n\nFrom the filtered datasets, there are 131,662 movies, 29,789 TV series, and 155,722 TV episodes.\n\n\n\n\n\nCode\noldest_living_p &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear) & !is.na(birthYear)) |&gt;  # Only living people with known birthYear\n  arrange(birthYear) |&gt;                             # Sort by birth year (ascending)\n  slice(1)                                           # Select the first (oldest) person\n\nprint(oldest_living_p |&gt; select(primaryName, birthYear ))\n\n\n      primaryName birthYear\n1 Robert De Visée      1655\n\n\nThe oldest living person is Robert De Visée, based on the data table. However, I know that is most definitely not true because he was born in 1655. When I check the IMDb site of Robert De Visée, I see that it is missing his death date. I will change show the top 20 oldest people. Someone must have entered data incorrectly. This really shows the importance of inputting data.\n\n\nCode\noldest_living_p &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear) & !is.na(birthYear)) |&gt;  # Only living people with known birthYear\n  arrange(birthYear) |&gt;                             # Sort by birth year (ascending)\n  head(20)                                         # Select the top 3 (oldest) person\n\nprint(oldest_living_p |&gt; select(primaryName, birthYear ))\n\n\n         primaryName birthYear\n1    Robert De Visée      1655\n2     William Sandys      1767\n3     Richard Dybeck      1811\n4     Albert Monnier      1815\n5         C. Hostrup      1818\n6     Edouard Martin      1825\n7      Ion Ivanovici      1845\n8    Attilio Corbell      1850\n9      André Sylvane      1850\n10    Charles Dungan      1853\n11      Jacob Abrams      1854\n12   James W. Castle      1854\n13   Edmond Duquesne      1854\n14 Maurice Ordonneau      1854\n15      Adolf Weisse      1855\n16   Black Dyke Band      1855\n17     William Parry      1856\n18 Arthur Weinschenk      1856\n19    Emile La Croix      1857\n20    Robert Charvay      1858\n\n\nUnfortunately, the top 20 “oldest living” people based on the dataset of NAME_BASICS are all incorrect. To answer the question simply based on the data, it would be Robert De Visée but I would need the deathYear inputted to all celebrities in order to answer the question.\n\n\n\n\n\nCode\n# Filter the ratings dataset for titles with a perfect 10/10 rating and at least 200,000 votes\nperfect_episodes &lt;- TITLE_RATINGS |&gt;\n  filter(averageRating == 10, numVotes &gt;= 200000)\n\n# Join with the basics data to get more information about TV episodes\nperfect_tv_episode &lt;- perfect_episodes |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  filter(titleType == \"tvEpisode\")\n\n# Join with the episode dataset to find the series name\nperfect_tv_episode_show &lt;- perfect_tv_episode |&gt;\n  left_join(TITLE_EPISODES, by = \"tconst\") |&gt;\n  left_join(TITLE_BASICS, by = join_by(parentTconst == tconst), suffix = c(\"_episode\", \"_series\"))\n\nperfect_tv_episode_show |&gt;\n  select(primaryTitle_episode, primaryTitle_series) |&gt;\n  print()\n\n\n  primaryTitle_episode primaryTitle_series\n1           Ozymandias        Breaking Bad\n\n\nIt is episode Ozymandias from Breaking Bad.\n\n\n\n\n\nCode\n# Find Mark Hamill's entry using his name and extract his 'knownForTitles'\nmark_hamill &lt;- NAME_BASICS|&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  select(nconst, knownForTitles)\n\n# Split the knownForTitles (which is a comma-separated string) into individual tconsts\nknown_titles &lt;- unlist(strsplit(mark_hamill$knownForTitles, \",\"))\n\n# Filter the title.basics data to get information about Mark Hamill's \"known for\" titles\nmark_hamill_known_for &lt;- TITLE_BASICS|&gt;\n  filter(tconst %in% known_titles) |&gt;\n  select(primaryTitle, titleType)\n\nprint(mark_hamill_known_for)\n\n\n                                    primaryTitle titleType\n1             Star Wars: Episode IV - A New Hope     movie\n2 Star Wars: Episode V - The Empire Strikes Back     movie\n3     Star Wars: Episode VI - Return of the Jedi     movie\n4        Star Wars: Episode VIII - The Last Jedi     movie\n\n\nMark Hamill is most known for his roles in Star Wars!\n\n\n\n\n\nCode\n# Filter for TV episodes and join with episode details (parentTconst)\ntv_episodes &lt;- TITLE_EPISODES|&gt;\n  inner_join(TITLE_BASICS, by = c(\"tconst\" = \"tconst\")) |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  select(tconst, parentTconst)\n\n# Count the number of episodes per series\nseries_episode_counts &lt;- tv_episodes|&gt;\n  group_by(parentTconst) |&gt;\n  summarise(episode_count = n()) |&gt;\n  filter(episode_count &gt; 12)  # Filter for series with more than 12 episodes\n\n# Calculate the average rating for each series based on episode ratings\nseries_avg_rating &lt;- tv_episodes|&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  inner_join(series_episode_counts, by = \"parentTconst\") |&gt;\n  group_by(parentTconst) |&gt;\n  summarise(average_series_rating = mean(averageRating, na.rm = TRUE))|&gt;\n  arrange(desc(average_series_rating))  # Sort by highest average rating\n\n# Join with the basics dataset to get series titles\ntop_rated_series &lt;- series_avg_rating|&gt;\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(primaryTitle, average_series_rating) |&gt;\n  slice(1)  # Get the series with the highest average rating\n\nprint(top_rated_series)\n\n\n# A tibble: 1 × 2\n  primaryTitle                 average_series_rating\n  &lt;chr&gt;                                        &lt;dbl&gt;\n1 Kavya - Ek Jazbaa, Ek Junoon                  9.75\n\n\nThe Kayva TV series has the highest average rating of 9.75.\n\n\n\n\n\nCode\n# Find the tconst for Happy Days\nhappy_days_series &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Happy Days\" & titleType == \"tvSeries\") |&gt;\n  select(tconst)\n\n# Filter for Happy Days episodes from title_episode\nhappy_days_episodes &lt;- TITLE_EPISODES |&gt;\n  filter(parentTconst == happy_days_series$tconst)  |&gt;\n  select(tconst, seasonNumber, episodeNumber)\n\n\nI have selected the columns I am looking at. I will put it into a visualization to answer the questions.\n\n\nCode\n# Join with ratings data to get episode ratings\nhappy_days_ratings &lt;- happy_days_episodes |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  filter(!is.na(seasonNumber))  # Exclude episodes without season information\n\n# Define early seasons (1-5) and later seasons (6 and beyond)\nhappy_days_ratings &lt;- happy_days_ratings |&gt;\n  mutate(season_group = ifelse(seasonNumber &lt;= 5, \"Early Seasons (1-5)\", \"Later Seasons (6+)\"))\n\n# Calculate the average rating for early and later seasons\nseason_group_avg &lt;- happy_days_ratings |&gt;\n  group_by(season_group) |&gt;\n  summarise(average_rating = mean(averageRating, na.rm = TRUE),\n            episode_count = n())\n\n# Print the average ratings for early and later seasons\nprint(season_group_avg)\n\n\n# A tibble: 2 × 3\n  season_group        average_rating episode_count\n  &lt;chr&gt;                        &lt;dbl&gt;         &lt;int&gt;\n1 Early Seasons (1-5)           7.53            58\n2 Later Seasons (6+)            6.83            10\n\n\nCode\n# Plot average ratings of early vs later seasons\nggplot(season_group_avg, aes(x = season_group, y = average_rating, fill = season_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Ratings: Early vs Later Seasons of Happy Days\",\n       x = \"Season Group\",\n       y = \"Average Rating\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nBased on the histogram, yes, it is true that the ratings of Happy Days got lower as the show progressed.\n\n\n\n\n\nA “success” measure that reflects both quality and popular awareness will include average ratings and number of votes. A common approach is to compute a weighted score of both of these factors so it looks like success = averageRating x log(numVotes)\n\n\n\n\n\n\n\nCode\n# Create a success metric\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  mutate(success_metric = averageRating * log(numVotes))\n\ntop_movies &lt;- TITLE_RATINGS |&gt;\n  arrange(desc(success_metric))  |&gt;\n  slice(1:10)  # Select the top 10 movies\n\n# Join with the basics dataset to get movie titles for validation\ntop_movies_with_titles &lt;- top_movies |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info\n\nprint(top_movies_with_titles %&gt;% select(primaryTitle, success_metric))\n\n\n                                        primaryTitle success_metric\n1                                       Breaking Bad       138.7723\n2                           The Shawshank Redemption       138.5224\n3                                    Game of Thrones       134.9493\n4                                    The Dark Knight       133.9928\n5                                      The Godfather       133.7121\n6      The Lord of the Rings: The Return of the King       130.6399\n7                                       Pulp Fiction       130.2149\n8                                          Inception       129.9699\n9  The Lord of the Rings: The Fellowship of the Ring       129.3173\n10                                        Fight Club       129.1874\n\n\n\n\n\n\n\nCode\n# Filter for movies with large numbers of votes and low success metric. Assuming 'large' is more than 100,000 votes\nlow_success_movies &lt;- TITLE_RATINGS |&gt;\n  filter(numVotes &gt; 100000)  |&gt;\n  arrange(success_metric)  |&gt;\n  slice(1:5)  # Select the bottom 5 movies with poor success metric\n\n# Join with title.basics to get the titles for validation\nlow_success_movies_with_titles &lt;- low_success_movies %&gt;%\n  inner_join(TITLE_BASICS, by = \"tconst\") %&gt;%\n  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info\n\nprint(low_success_movies_with_titles)\n\n\n       primaryTitle averageRating numVotes success_metric\n1             Radhe           1.9   180205       22.99352\n2        Epic Movie           2.4   110222       27.86460\n3         Adipurush           2.7   133981       31.87472\n4 Meet the Spartans           2.8   112199       32.55848\n5          365 Days           3.3   100579       38.01171\n\n\n\n\n\nThe last movie I went to see in theaters was Christopher Nolan’s Oppenheimer. I will pick him as a prestige director for this example.\n\n# Find the nconst for Christopher Nolan\nnolan &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Christopher Nolan\") |&gt;\n  select(nconst)\n\n# Find all projects where Christopher Nolan is the director\nnolan_projects &lt;- TITLE_PRINCIPALS|&gt;\n  filter(nconst == nolan$nconst, category == \"director\") |&gt;\n  select(tconst)\n\nI found Christopher Nolan within the Name table and Principals title. Now I will join them the success metric in the ratings table then join with title_basic to get project titles.\n\n\nCode\n# Join Nolan's projects with the ratings data to calculate success metrics\nnolan_projects_ratings &lt;- nolan_projects|&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric\n\n# Join with the basics dataset to get project titles\nnolan_projects_with_titles &lt;- nolan_projects_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")|&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric) |&gt;\n  arrange(desc(success_metric))  # Sort by highest \n\nprint(nolan_projects_with_titles)\n\n\n      primaryTitle averageRating numVotes success_metric\n1  The Dark Knight           9.0  2922922      133.99285\n2        Inception           8.8  2595555      129.96994\n3     Interstellar           8.7  2161548      126.90112\n4    Batman Begins           8.2  1603362      117.15843\n5      Oppenheimer           8.3   797550      112.79120\n6          Dunkirk           7.8   752538      105.54342\n7            Tenet           7.3   606902       97.20771\n8         Insomnia           7.2   323258       91.34071\n9        Following           7.4   103363       85.44049\n10            Quay           6.4     1740       47.75818\n\n\n\n\n\nOne more “spot check” can be to see if Oscar-winning movies have a high success score. I looked up some movies to manually input into the code to check.\n\n\nCode\n# List of famous Oscar-winning movies (Best Picture winners)\noscar_winners &lt;- c(\"The Godfather\", \"Schindler's List\", \"The Silence of the Lambs\", \n                   \"Forrest Gump\", \"Gladiator\", \"No Country for Old Men\", \"Parasite\")\n\n# Filter the IMDb basics dataset to find tconsts of these movies\noscar_winner_movies &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle %in% oscar_winners) |&gt;\n  select(tconst, primaryTitle)\n\n# Join with the ratings data to get the success metric for these movies\noscar_winner_ratings &lt;- oscar_winner_movies |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))\n\noscar_winner_ratings |&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric)  |&gt;\n  arrange(desc(success_metric))  |&gt;\n  print()\n\n\n               primaryTitle averageRating numVotes success_metric\n1             The Godfather           9.2  2051186      133.71215\n2              Forrest Gump           8.8  2301630      128.91233\n3          Schindler's List           9.0  1475891      127.84296\n4  The Silence of the Lambs           8.6  1578087      122.73683\n5                 Gladiator           8.5  1658228      121.73072\n6                  Parasite           8.5   993790      117.37890\n7    No Country for Old Men           8.2  1082550      113.93761\n8             The Godfather           8.3     4072       68.99072\n9                 Gladiator           6.5    10651       60.27777\n10                 Parasite           7.4     1869       55.74933\n11            The Godfather           8.3      679       54.13337\n12             Forrest Gump           7.8      540       49.08867\n13                 Parasite           8.5      298       48.45377\n14                Gladiator           7.8      323       45.08980\n15                Gladiator           7.1      449       43.37566\n16            The Godfather           8.8      106       41.12089\n17            The Godfather           7.9      127       38.33104\n18                 Parasite           5.0     1543       36.71066\n19            The Godfather           7.7      100       35.53643\n20             Forrest Gump           7.6      100       35.07492\n21   No Country for Old Men           7.2      101       33.29980\n22                 Parasite           4.1     3143       33.01833\n23            The Godfather           6.5      145       32.39344\n24            The Godfather           5.3      444       32.31979\n25            The Godfather           5.9      216       31.74139\n26                 Parasite           4.9      399       29.35818\n27                 Parasite           2.8      698       18.33902\n\n\nA numerical threshold of what “success” means for a project can be picked by looking at the quantile distribution of ratings across all movies.\n\n\nCode\n# Step 1: Inspect the distribution of the success metric\nsummary(TITLE_RATINGS$success_metric)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.615  33.779  40.232  42.229  49.022 138.772 \n\n\nCode\n# Step 2: Determine the 75th percentile (or another quantile) as the threshold for a 'solid' movie\nthreshold &lt;- quantile(TITLE_RATINGS$success_metric, 0.75)\n\nprint(paste(\"Threshold for a 'solid' movie: \", threshold))\n\n\n[1] \"Threshold for a 'solid' movie:  49.0217313885254\"\n\n\n\n\n\n\nNow, it is time to pick a genre for my movie. For research, I am looking at a couple questions. My first question is What was the genre with the most “successes” in each decade?\n\n\nCode\nsuccessful_movies &lt;- TITLE_RATINGS |&gt;\n  filter(success_metric &gt; threshold)\n\n# Join with imdb_basics to get genre and year information\nsuccessful_movies_with_genres &lt;- successful_movies |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  filter(!is.na(startYear))  # Ensure the movie has a valid start year\n\n# Create a new column for the decade\nsuccessful_movies_with_genres &lt;- successful_movies_with_genres |&gt;\n  mutate(decade = floor(as.numeric(startYear) / 10) * 10)  # Convert year to decade\n\n# Separate genres (if multiple genres are in a single string)\nsuccessful_movies_with_genres &lt;- successful_movies_with_genres |&gt;\n  separate_rows(genres, sep = \",\")  # Separate genres into individual rows if comma-separated\n\n# Group by decade and genre, then count the number of successes per genre in each decade\ngenre_counts_by_decade &lt;- successful_movies_with_genres |&gt;\n  group_by(decade, genres)  |&gt;\n  summarise(success_count = n()) |&gt;\n  arrange(decade, desc(success_count))\n\n# Find the genre with the most successes in each decade\nmost_successful_genres_per_decade &lt;- genre_counts_by_decade |&gt;\n  group_by(decade) |&gt;\n  slice_max(success_count, n = 1)  # Get the genre with the highest count per decade\n\nprint(most_successful_genres_per_decade)\n\n\n# A tibble: 18 × 3\n# Groups:   decade [16]\n   decade genres      success_count\n    &lt;dbl&gt; &lt;chr&gt;               &lt;int&gt;\n 1   1870 Documentary             2\n 2   1870 Short                   2\n 3   1880 Documentary             2\n 4   1880 Short                   2\n 5   1890 Short                  12\n 6   1900 Short                  13\n 7   1910 Comedy                 33\n 8   1920 Drama                 124\n 9   1930 Drama                 328\n10   1940 Drama                 498\n11   1950 Drama                 857\n12   1960 Drama                1235\n13   1970 Drama                1514\n14   1980 Drama                1878\n15   1990 Drama                3877\n16   2000 Drama               10438\n17   2010 Drama               22390\n18   2020 Drama               10070\n\n\n\n\nCode\nggplot(most_successful_genres_per_decade, aes(x = factor(decade), y = success_count, fill = genres)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Most Successful Genres Per Decade\",\n       x = \"Decade\",\n       y = \"Number of Successful Movies\",\n       fill = \"Genre\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nMy next set of questions are what genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?\n\n\nCode\n# Filter for movies produced since 2010 and for successes\nsuccessful_movies_since_2010 &lt;- TITLE_RATINGS |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  filter(as.numeric(startYear) &gt;= 2010)  |&gt;  # Movies from 2010 onwards\n  filter(success_metric &gt; threshold)  # Only successful movies\n\n# Separate genres (in case of multiple genres in a single string)\nsuccessful_movies_since_2010 &lt;- successful_movies_since_2010 |&gt;\n  separate_rows(genres, sep = \",\")\n\n# Count the number of successes per genre\ngenre_success_count &lt;- successful_movies_since_2010 |&gt;\n  group_by(genres)  |&gt;\n  summarise(success_count = n())  |&gt;\n  arrange(desc(success_count))\n\n# Calculate the total number of productions per genre since 2010\ntotal_movies_per_genre &lt;- TITLE_BASICS |&gt;\n  filter(as.numeric(startYear) &gt;= 2010)  |&gt;\n  separate_rows(genres, sep = \",\")  |&gt;\n  group_by(genres) |&gt;\n  summarise(total_count = n())\n\n# Join the success count with the total production count and calculate success rate\ngenre_success_rate &lt;- genre_success_count |&gt;\n  inner_join(total_movies_per_genre, by = \"genres\")  |&gt;\n  mutate(success_rate = success_count / total_count)  |&gt;\n  arrange(desc(success_rate))\n\nggplot(genre_success_rate, aes(x = success_count, y = success_rate, label = genres)) +\n  geom_point(color = \"blue\", size = 3) +\n  geom_text(vjust = -1, size = 3) +  # Add genre labels to the points\n  labs(title = \"Success Rate vs Number of Successes (2010 onwards)\",\n       x = \"Number of Successes\",\n       y = \"Success Rate\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThrough this, I see that drama is still the number one genre to choose, but action, crime, adventure, and comedy are also good genres to pick with high success rate and high success count.\nWith this, I will choose the genre drama! IMDb’s definition of drama is “numerous consecutive scenes of characters portrayed to effect a serious narrative throughout the title, usually involving conflicts and emotions. This can be exaggerated upon to produce melodrama.” Some examples of subgenres under this category are coming-of-age, historical epic, medical drama, and psychological drama. Quite a bit of subgenres are set under this genre!\nParticularly, I am interested in the subgenre Epic, described as “grand and sweeping stories often set against significant historical, cultural, or societal backdrops. Epic dramas are characterized by their scope, scale, and often lengthy runtime, as they aim to capture the grandeur of human experiences, events, and emotions.”\n\n\n\n\n\nBased on my interest in pursuing a drama movie, set in the subgenre epic, I would like to create a team with Christopher Nolan as the director. He has experience in creating drama movies that are “successful”.\n\n\nCode\n# Join Christopher Nolan's projects with the title.basics dataset to get genres\nnolan_projects_with_genres &lt;- nolan_projects |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  separate_rows(genres, sep = \",\")  |&gt;\n  filter(genres == \"Drama\")  # Filter for drama movies\n\n# Join with the ratings dataset to calculate success metrics for drama movies\nnolan_drama_success &lt;- nolan_projects_with_genres |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))\n\nnolan_drama_success |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric)  |&gt;\n  arrange(desc(success_metric)) |&gt;\n  gt()  |&gt;\n  tab_header(\n    title = \"Christopher Nolan's Successful Drama Movies\"\n  )\n\n\n\n\n\n\n\n\nChristopher Nolan's Successful Drama Movies\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nThe Dark Knight\n2008\n9.0\n2922922\n133.99285\n\n\nInterstellar\n2014\n8.7\n2161548\n126.90112\n\n\nBatman Begins\n2005\n8.2\n1603362\n117.15843\n\n\nOppenheimer\n2023\n8.3\n797550\n112.79120\n\n\nDunkirk\n2017\n7.8\n752538\n105.54342\n\n\nInsomnia\n2002\n7.2\n323258\n91.34071\n\n\n\n\n\n\n\nAn established actor I would like to add to the team is Leonardo DiCaprio. Not only is he but he has worked on projects with Christopher Nolan in the past.\n\n\nCode\n# Find Leonardo DiCaprio's nconst (unique identifier for individuals)\nleonardo &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Leonardo DiCaprio\")  |&gt;\n  select(nconst)\n\n# Get all projects where Leonardo DiCaprio is an actor\nleonardo_projects &lt;- TITLE_PRINCIPALS |&gt;\n  filter(nconst == leonardo$nconst, category == \"actor\")  |&gt;\n  select(tconst)\n\n# Join Leonardo DiCaprio's projects with the ratings data to calculate success metrics\nleonardo_ratings &lt;- leonardo_projects |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\nleonardo_success &lt;- leonardo_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\nleonardo_success |&gt;\n  head(10) |&gt;\n  gt() %&gt;%\n  tab_header(\n    title = \"Leonardo DiCaprio's Top 10 Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nLeonardo DiCaprio's Top 10 Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInception\n2010\n8.8\n2595555\n129.9699\n\n\nDjango Unchained\n2012\n8.5\n1729019\n122.0861\n\n\nThe Departed\n2006\n8.5\n1444597\n120.5584\n\n\nThe Wolf of Wall Street\n2013\n8.2\n1620302\n117.2446\n\n\nShutter Island\n2010\n8.2\n1490811\n116.5616\n\n\nCatch Me If You Can\n2002\n8.1\n1120635\n112.8282\n\n\nTitanic\n1997\n7.9\n1305247\n111.2470\n\n\nThe Revenant\n2015\n8.0\n888373\n109.5772\n\n\nBlood Diamond\n2006\n8.0\n594079\n106.3582\n\n\nOnce Upon a Time... in Hollywood\n2019\n7.6\n870617\n103.9449\n\n\n\n\n\n\n\nThis table proves that Leonardo DiCaprio is a great actor! An up and coming actor that I would like to bring is Timothée Chalamet. His most recent work is Dune, an American epic science fiction film based off the book series, Dune.\n\n\nCode\n# Find Timothée Chalamet's nconst (unique identifier for individuals)\ntimothee &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Timothée Chalamet\")  |&gt;\n  select(nconst)\n\n# Get all projects where Timothée Chalamet is an actor\ntimothee_projects &lt;- TITLE_PRINCIPALS |&gt;\n  filter(nconst == timothee$nconst, category == \"actor\")  |&gt;\n  select(tconst)\n\n# Join Timothée Chalamet's projects with the ratings data to calculate success metrics\ntimothee_ratings &lt;- timothee_projects |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\ntimothee_success &lt;- timothee_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\ntimothee_success |&gt;\n  head(10)  |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Timothée Chalamet's Top 10 Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nTimothée Chalamet's Top 10 Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInterstellar\n2014\n8.7\n2161548\n126.90112\n\n\nDune: Part Two\n2024\n8.5\n518546\n111.84968\n\n\nDune: Part One\n2021\n8.0\n903916\n109.71594\n\n\nCall Me by Your Name\n2017\n7.8\n325336\n99.00241\n\n\nLittle Women\n2019\n7.8\n253631\n97.06039\n\n\nDon't Look Up\n2021\n7.2\n616776\n95.99229\n\n\nLady Bird\n2017\n7.4\n339316\n94.23671\n\n\nBeautiful Boy\n2018\n7.4\n104692\n85.53503\n\n\nThe French Dispatch\n2021\n7.1\n153812\n84.79880\n\n\nWonka\n2023\n7.0\n159203\n83.84559\n\n\n\n\n\n\n\nSurprisingly, I did not know that Timothée Chamalet was also in a Christopher Nolan project. With 11 movies above the success threshold, I think Timothée will be a great addition to the team.\n\n\n\n\n\n\nOf course, now it is time to create a killer plot. One way is to look at and remake a classic film. The criteria for a classic film is as follows: * large number of IMDb ratings &gt;100,000 * high average rating &gt;8 * have not been remade in the past 25 years\n\n\nCode\n# Filter for movies released before 1999 (at least 25 years old)\nclassic_movies &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\" & as.numeric(startYear) &lt; 1999)\n\n# Join with ratings data to find movies with high ratings and large number of votes\nclassic_movies_with_ratings &lt;- classic_movies |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  filter(numVotes &gt; 100000 & averageRating &gt; 8.5)  # Filter for high votes and high ratings\n\n#  Sort by highest average rating and number of votes to find top movies\ntop_classic_movies &lt;- classic_movies_with_ratings |&gt;\n  arrange(desc(averageRating), desc(numVotes))\n\n# Exclude movies that have been remade in the past 25 years\nremade_movies &lt;- TITLE_BASICS  |&gt;\n  filter(titleType == \"remake\" & as.numeric(startYear) &gt;= 1999)\n\n# Filter out remade movies from top classic movies\nclassic_movies_to_remake &lt;- top_classic_movies |&gt;\n  filter(!tconst %in% remade_movies$tconst)\n\nclassic_movies_to_remake |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes) |&gt;\n  gt() |&gt;\n  tab_header(title = \"Top Classic Movies to Remake\")\n\n\n\n\n\n\n\n\nTop Classic Movies to Remake\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\n\n\n\n\nThe Shawshank Redemption\n1994\n9.3\n2942823\n\n\nThe Godfather\n1972\n9.2\n2051186\n\n\nSchindler's List\n1993\n9.0\n1475891\n\n\nThe Godfather Part II\n1974\n9.0\n1386499\n\n\n12 Angry Men\n1957\n9.0\n884567\n\n\nPulp Fiction\n1994\n8.9\n2260017\n\n\nForrest Gump\n1994\n8.8\n2301630\n\n\nThe Good, the Bad and the Ugly\n1966\n8.8\n824512\n\n\nStar Wars: Episode V - The Empire Strikes Back\n1980\n8.7\n1401591\n\n\nGoodfellas\n1990\n8.7\n1280574\n\n\nOne Flew Over the Cuckoo's Nest\n1975\n8.7\n1087006\n\n\nSe7en\n1995\n8.6\n1836180\n\n\nThe Silence of the Lambs\n1991\n8.6\n1578087\n\n\nSaving Private Ryan\n1998\n8.6\n1521594\n\n\nStar Wars: Episode IV - A New Hope\n1977\n8.6\n1471222\n\n\nTerminator 2: Judgment Day\n1991\n8.6\n1194496\n\n\nLife Is Beautiful\n1997\n8.6\n754383\n\n\nIt's a Wonderful Life\n1946\n8.6\n505818\n\n\nSeven Samurai\n1954\n8.6\n372202\n\n\n\n\n\n\n\nFrom the list, I would like to remake Schindler’s List, a movie based during World War II. Since the movie was made in 1993, I believe most of the cast is still around.\n\n\nCode\n# Find the tconst for Schindler's List\nschindlers_list &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Schindler's List\" & titleType == \"movie\")  |&gt;\n  select(tconst)\n\n# Get key talent (actors, directors, writers) from Schindler's List\nkey_talent &lt;- TITLE_PRINCIPALS  |&gt;\n  filter(tconst == schindlers_list$tconst & category %in% c(\"actor\", \"director\", \"writer\")) |&gt;\n  select(nconst, category)\n\n# Join with the name.basics dataset to check if they are still alive\nkey_talent_info &lt;- key_talent |&gt;\n  inner_join(NAME_BASICS, by = \"nconst\") |&gt;\n  select(primaryName, category, birthYear, deathYear)  # Select relevant info\n\n# Filter for those who are still alive (deathYear is NA)\nstill_alive &lt;- key_talent_info  |&gt;\n  filter(is.na(deathYear))\n\nstill_alive |&gt;\n  gt() |&gt;\n  tab_header(title = \"Key talent from Schindler's List - Still Alive\")\n\n\n\n\n\n\n\n\nKey talent from Schindler's List - Still Alive\n\n\nprimaryName\ncategory\nbirthYear\ndeathYear\n\n\n\n\nLiam Neeson\nactor\n1952\nNA\n\n\nRalph Fiennes\nactor\n1962\nNA\n\n\nBen Kingsley\nactor\n1943\nNA\n\n\nJonathan Sagall\nactor\n1959\nNA\n\n\nShmuel Levy\nactor\n1962\nNA\n\n\nSteven Spielberg\ndirector\n1946\nNA\n\n\nThomas Keneally\nwriter\n1935\nNA\n\n\nSteven Zaillian\nwriter\n1953\nNA\n\n\n\n\n\n\n\n\n\n\n\nThrough the decades, drama films have been increasing in popularity, completely dominating all other genres in the industry with 32,460 movies made since 2010. Combined with other competing genres of adventure, crime, action, and comedy, I would like to create an epic drama.\nThis movie will be directed by Christopher Nolan, an expert at drama movies. With 6 movies in the drama genre, all are above the success metric of 49.02. Alongside director Nolan, I would like to bring on Leonardo DiCaprio, a Hollywood icon who has played various roles throughout his career. Another actor I would like to bring in is Timothee Chalamet who played in Dune, an epic science fiction movie. With Chalamet’s background, he would fit this new movie concept very well. One fun fact is that both actors have worked with director Nolan separately before, on Inception and Interstellar.\nThe story will be based of off Schindler’s List, a 1993 film set in World War II taken from a true story of Oskar Schindler The film focuses on his transformation from a business man to a humanitarian through the factory he runs. This story will captivate today’s audience, as we are continually surrounded by global conflicts.\n\nFrom director Christopher Nolan, the visionary mind behind Oppenheimer,\nFrom actor Leonardo DiCaprio, a Hollywood icon,\nFrom actor Timothee Chalamet, the star of Dune movie series,\nComes a rich historical drama\nA story of war, love, will power, and humanity\nComing soon to a theater near you."
  },
  {
    "objectID": "mp02.html#datasets-for-research",
    "href": "mp02.html#datasets-for-research",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Credits to IMDb, with their expansive library of movies, I will use their datasets for my research. The code to extract the data is as follows:\n\n#libraries \nlibrary(stringr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(gt)\n\nget_imdb_file &lt;- function(fname) {\n  BASE_URL &lt;- \"https://github.com/michaelweylandt/STA9750/raw/main/miniprojects/mini02_preprocessed/\"\n  fname_ext &lt;- paste0(fname, \".csv.zip\")\n  \n  if (!file.exists(fname_ext)) {\n    FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n    download.file(FILE_URL, destfile = fname_ext)\n  }\n  \n  # Unzip the file and read the CSV\n  temp_file &lt;- unzip(fname_ext, list = TRUE)$Name[1]  # Get the name of the first file inside the ZIP\n  unzip(fname_ext)  # Unzip the file\n  as.data.frame(readr::read_csv(temp_file)) \n}\n\nNAME_BASICS     &lt;- get_imdb_file(\"name_basics_small\")\n\nTITLE_BASICS     &lt;- get_imdb_file(\"title_basics_small\")\n\nTITLE_EPISODES   &lt;- get_imdb_file(\"title_episodes_small\")\n\nTITLE_RATINGS    &lt;- get_imdb_file(\"title_ratings_small\")\n\nTITLE_CREW       &lt;- get_imdb_file(\"title_crew_small\")\n\nTITLE_PRINCIPALS &lt;- get_imdb_file(\"title_principals_small\")"
  },
  {
    "objectID": "mp02.html#data-sub-sampling",
    "href": "mp02.html#data-sub-sampling",
    "title": "The Business of Show Business",
    "section": "",
    "text": "With such a huge dataset, I narrow down to people with at least 2 “known for” credits.\n\nNAME_BASICS &lt;- NAME_BASICS |&gt; \n    filter(str_count(knownForTitles, \",\") &gt; 1)\n\nThen I narrow down titles through rating count. Pictured below is a visualization of the distribution of rating counts across the titles:\n\n\n\n\n\n\n\n\n\nAbout 75% of the dataset is has less than 100 ratings and we can see this through quantile distribution:\n\n\n     0%     25%     50%     75%    100% \n    100     165     332     970 2942823 \n\n\nThrough this step, I filter the data to only view titles with 100 or more ratings:\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n    filter(numVotes &gt;= 100)\n\nThis filtering is then applied to the rest of the data tables:\n\n\nCode\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(parentTconst == tconst))\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |&gt;\n    distinct()\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n    semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n\n\nFrom the IMDb site, I see that columns that should be set as numeric type are set as character (string) vectors. I change this by using the following command:\n\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\n\n\nIn Task 1, I will correct the column types of applicable tables, just like with the NAME_BASICS table.\n\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n  mutate(\n    isAdult = as.logical(isAdult),\n    startYear = as.numeric(startYear),    # Coerce\n    endYear = as.numeric(endYear), # Coerce \n    runtimeMinutes = as.numeric(runtimeMinutes)\n  )\n\nTITLE_EPISODES &lt;- TITLE_EPISODES |&gt;\n  mutate(seasonNumber = as.numeric(seasonNumber),\n         episodeNumber = as.numeric(episodeNumber))\n\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  mutate(\n    averageRating = as.numeric(averageRating),    # Coerce\n    numVotes = as.numeric(numVotes )     # Coerce \n  )\n\nLooking through the IMDb dataset details on the site, I found that only TITLE_BASICS and TITLE_RATINGS needed to be corrected.\n\n\n\nUsing dplyr functionality, I will answer these questions:\n\n\n\n\nCode\n# Count the number\nTITLE_movie &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\") |&gt;\n  summarise(count = n())\n\nTITLE_tvseries &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  summarise(count = n())\n\nTITLE_tvepisode &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  summarise(count = n())\n\nprint(TITLE_movie)\n\n\n   count\n1 131662\n\n\nCode\nprint(TITLE_tvseries)\n\n\n  count\n1 29789\n\n\nCode\nprint(TITLE_tvepisode)\n\n\n   count\n1 155722\n\n\nFrom the filtered datasets, there are 131,662 movies, 29,789 TV series, and 155,722 TV episodes.\n\n\n\n\n\nCode\noldest_living_p &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear) & !is.na(birthYear)) |&gt;  # Only living people with known birthYear\n  arrange(birthYear) |&gt;                             # Sort by birth year (ascending)\n  slice(1)                                           # Select the first (oldest) person\n\nprint(oldest_living_p |&gt; select(primaryName, birthYear ))\n\n\n      primaryName birthYear\n1 Robert De Visée      1655\n\n\nThe oldest living person is Robert De Visée, based on the data table. However, I know that is most definitely not true because he was born in 1655. When I check the IMDb site of Robert De Visée, I see that it is missing his death date. I will change show the top 20 oldest people. Someone must have entered data incorrectly. This really shows the importance of inputting data.\n\n\nCode\noldest_living_p &lt;- NAME_BASICS |&gt;\n  filter(is.na(deathYear) & !is.na(birthYear)) |&gt;  # Only living people with known birthYear\n  arrange(birthYear) |&gt;                             # Sort by birth year (ascending)\n  head(20)                                         # Select the top 3 (oldest) person\n\nprint(oldest_living_p |&gt; select(primaryName, birthYear ))\n\n\n         primaryName birthYear\n1    Robert De Visée      1655\n2     William Sandys      1767\n3     Richard Dybeck      1811\n4     Albert Monnier      1815\n5         C. Hostrup      1818\n6     Edouard Martin      1825\n7      Ion Ivanovici      1845\n8    Attilio Corbell      1850\n9      André Sylvane      1850\n10    Charles Dungan      1853\n11      Jacob Abrams      1854\n12   James W. Castle      1854\n13   Edmond Duquesne      1854\n14 Maurice Ordonneau      1854\n15      Adolf Weisse      1855\n16   Black Dyke Band      1855\n17     William Parry      1856\n18 Arthur Weinschenk      1856\n19    Emile La Croix      1857\n20    Robert Charvay      1858\n\n\nUnfortunately, the top 20 “oldest living” people based on the dataset of NAME_BASICS are all incorrect. To answer the question simply based on the data, it would be Robert De Visée but I would need the deathYear inputted to all celebrities in order to answer the question.\n\n\n\n\n\nCode\n# Filter the ratings dataset for titles with a perfect 10/10 rating and at least 200,000 votes\nperfect_episodes &lt;- TITLE_RATINGS |&gt;\n  filter(averageRating == 10, numVotes &gt;= 200000)\n\n# Join with the basics data to get more information about TV episodes\nperfect_tv_episode &lt;- perfect_episodes |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\") |&gt;\n  filter(titleType == \"tvEpisode\")\n\n# Join with the episode dataset to find the series name\nperfect_tv_episode_show &lt;- perfect_tv_episode |&gt;\n  left_join(TITLE_EPISODES, by = \"tconst\") |&gt;\n  left_join(TITLE_BASICS, by = join_by(parentTconst == tconst), suffix = c(\"_episode\", \"_series\"))\n\nperfect_tv_episode_show |&gt;\n  select(primaryTitle_episode, primaryTitle_series) |&gt;\n  print()\n\n\n  primaryTitle_episode primaryTitle_series\n1           Ozymandias        Breaking Bad\n\n\nIt is episode Ozymandias from Breaking Bad.\n\n\n\n\n\nCode\n# Find Mark Hamill's entry using his name and extract his 'knownForTitles'\nmark_hamill &lt;- NAME_BASICS|&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  select(nconst, knownForTitles)\n\n# Split the knownForTitles (which is a comma-separated string) into individual tconsts\nknown_titles &lt;- unlist(strsplit(mark_hamill$knownForTitles, \",\"))\n\n# Filter the title.basics data to get information about Mark Hamill's \"known for\" titles\nmark_hamill_known_for &lt;- TITLE_BASICS|&gt;\n  filter(tconst %in% known_titles) |&gt;\n  select(primaryTitle, titleType)\n\nprint(mark_hamill_known_for)\n\n\n                                    primaryTitle titleType\n1             Star Wars: Episode IV - A New Hope     movie\n2 Star Wars: Episode V - The Empire Strikes Back     movie\n3     Star Wars: Episode VI - Return of the Jedi     movie\n4        Star Wars: Episode VIII - The Last Jedi     movie\n\n\nMark Hamill is most known for his roles in Star Wars!\n\n\n\n\n\nCode\n# Filter for TV episodes and join with episode details (parentTconst)\ntv_episodes &lt;- TITLE_EPISODES|&gt;\n  inner_join(TITLE_BASICS, by = c(\"tconst\" = \"tconst\")) |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  select(tconst, parentTconst)\n\n# Count the number of episodes per series\nseries_episode_counts &lt;- tv_episodes|&gt;\n  group_by(parentTconst) |&gt;\n  summarise(episode_count = n()) |&gt;\n  filter(episode_count &gt; 12)  # Filter for series with more than 12 episodes\n\n# Calculate the average rating for each series based on episode ratings\nseries_avg_rating &lt;- tv_episodes|&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  inner_join(series_episode_counts, by = \"parentTconst\") |&gt;\n  group_by(parentTconst) |&gt;\n  summarise(average_series_rating = mean(averageRating, na.rm = TRUE))|&gt;\n  arrange(desc(average_series_rating))  # Sort by highest average rating\n\n# Join with the basics dataset to get series titles\ntop_rated_series &lt;- series_avg_rating|&gt;\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |&gt;\n  select(primaryTitle, average_series_rating) |&gt;\n  slice(1)  # Get the series with the highest average rating\n\nprint(top_rated_series)\n\n\n# A tibble: 1 × 2\n  primaryTitle                 average_series_rating\n  &lt;chr&gt;                                        &lt;dbl&gt;\n1 Kavya - Ek Jazbaa, Ek Junoon                  9.75\n\n\nThe Kayva TV series has the highest average rating of 9.75.\n\n\n\n\n\nCode\n# Find the tconst for Happy Days\nhappy_days_series &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Happy Days\" & titleType == \"tvSeries\") |&gt;\n  select(tconst)\n\n# Filter for Happy Days episodes from title_episode\nhappy_days_episodes &lt;- TITLE_EPISODES |&gt;\n  filter(parentTconst == happy_days_series$tconst)  |&gt;\n  select(tconst, seasonNumber, episodeNumber)\n\n\nI have selected the columns I am looking at. I will put it into a visualization to answer the questions.\n\n\nCode\n# Join with ratings data to get episode ratings\nhappy_days_ratings &lt;- happy_days_episodes |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  filter(!is.na(seasonNumber))  # Exclude episodes without season information\n\n# Define early seasons (1-5) and later seasons (6 and beyond)\nhappy_days_ratings &lt;- happy_days_ratings |&gt;\n  mutate(season_group = ifelse(seasonNumber &lt;= 5, \"Early Seasons (1-5)\", \"Later Seasons (6+)\"))\n\n# Calculate the average rating for early and later seasons\nseason_group_avg &lt;- happy_days_ratings |&gt;\n  group_by(season_group) |&gt;\n  summarise(average_rating = mean(averageRating, na.rm = TRUE),\n            episode_count = n())\n\n# Print the average ratings for early and later seasons\nprint(season_group_avg)\n\n\n# A tibble: 2 × 3\n  season_group        average_rating episode_count\n  &lt;chr&gt;                        &lt;dbl&gt;         &lt;int&gt;\n1 Early Seasons (1-5)           7.53            58\n2 Later Seasons (6+)            6.83            10\n\n\nCode\n# Plot average ratings of early vs later seasons\nggplot(season_group_avg, aes(x = season_group, y = average_rating, fill = season_group)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Ratings: Early vs Later Seasons of Happy Days\",\n       x = \"Season Group\",\n       y = \"Average Rating\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nBased on the histogram, yes, it is true that the ratings of Happy Days got lower as the show progressed."
  },
  {
    "objectID": "mp02.html#quantifying-success",
    "href": "mp02.html#quantifying-success",
    "title": "The Business of Show Business",
    "section": "",
    "text": "A “success” measure that reflects both quality and popular awareness will include average ratings and number of votes. A common approach is to compute a weighted score of both of these factors so it looks like success = averageRating x log(numVotes)"
  },
  {
    "objectID": "mp02.html#task-3",
    "href": "mp02.html#task-3",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Code\n# Create a success metric\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n  mutate(success_metric = averageRating * log(numVotes))\n\ntop_movies &lt;- TITLE_RATINGS |&gt;\n  arrange(desc(success_metric))  |&gt;\n  slice(1:10)  # Select the top 10 movies\n\n# Join with the basics dataset to get movie titles for validation\ntop_movies_with_titles &lt;- top_movies |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info\n\nprint(top_movies_with_titles %&gt;% select(primaryTitle, success_metric))\n\n\n                                        primaryTitle success_metric\n1                                       Breaking Bad       138.7723\n2                           The Shawshank Redemption       138.5224\n3                                    Game of Thrones       134.9493\n4                                    The Dark Knight       133.9928\n5                                      The Godfather       133.7121\n6      The Lord of the Rings: The Return of the King       130.6399\n7                                       Pulp Fiction       130.2149\n8                                          Inception       129.9699\n9  The Lord of the Rings: The Fellowship of the Ring       129.3173\n10                                        Fight Club       129.1874\n\n\n\n\n\n\n\nCode\n# Filter for movies with large numbers of votes and low success metric. Assuming 'large' is more than 100,000 votes\nlow_success_movies &lt;- TITLE_RATINGS |&gt;\n  filter(numVotes &gt; 100000)  |&gt;\n  arrange(success_metric)  |&gt;\n  slice(1:5)  # Select the bottom 5 movies with poor success metric\n\n# Join with title.basics to get the titles for validation\nlow_success_movies_with_titles &lt;- low_success_movies %&gt;%\n  inner_join(TITLE_BASICS, by = \"tconst\") %&gt;%\n  select(primaryTitle, averageRating, numVotes, success_metric)  # Display relevant info\n\nprint(low_success_movies_with_titles)\n\n\n       primaryTitle averageRating numVotes success_metric\n1             Radhe           1.9   180205       22.99352\n2        Epic Movie           2.4   110222       27.86460\n3         Adipurush           2.7   133981       31.87472\n4 Meet the Spartans           2.8   112199       32.55848\n5          365 Days           3.3   100579       38.01171\n\n\n\n\n\nThe last movie I went to see in theaters was Christopher Nolan’s Oppenheimer. I will pick him as a prestige director for this example.\n\n# Find the nconst for Christopher Nolan\nnolan &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Christopher Nolan\") |&gt;\n  select(nconst)\n\n# Find all projects where Christopher Nolan is the director\nnolan_projects &lt;- TITLE_PRINCIPALS|&gt;\n  filter(nconst == nolan$nconst, category == \"director\") |&gt;\n  select(tconst)\n\nI found Christopher Nolan within the Name table and Principals title. Now I will join them the success metric in the ratings table then join with title_basic to get project titles.\n\n\nCode\n# Join Nolan's projects with the ratings data to calculate success metrics\nnolan_projects_ratings &lt;- nolan_projects|&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\") |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric\n\n# Join with the basics dataset to get project titles\nnolan_projects_with_titles &lt;- nolan_projects_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")|&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric) |&gt;\n  arrange(desc(success_metric))  # Sort by highest \n\nprint(nolan_projects_with_titles)\n\n\n      primaryTitle averageRating numVotes success_metric\n1  The Dark Knight           9.0  2922922      133.99285\n2        Inception           8.8  2595555      129.96994\n3     Interstellar           8.7  2161548      126.90112\n4    Batman Begins           8.2  1603362      117.15843\n5      Oppenheimer           8.3   797550      112.79120\n6          Dunkirk           7.8   752538      105.54342\n7            Tenet           7.3   606902       97.20771\n8         Insomnia           7.2   323258       91.34071\n9        Following           7.4   103363       85.44049\n10            Quay           6.4     1740       47.75818\n\n\n\n\n\nOne more “spot check” can be to see if Oscar-winning movies have a high success score. I looked up some movies to manually input into the code to check.\n\n\nCode\n# List of famous Oscar-winning movies (Best Picture winners)\noscar_winners &lt;- c(\"The Godfather\", \"Schindler's List\", \"The Silence of the Lambs\", \n                   \"Forrest Gump\", \"Gladiator\", \"No Country for Old Men\", \"Parasite\")\n\n# Filter the IMDb basics dataset to find tconsts of these movies\noscar_winner_movies &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle %in% oscar_winners) |&gt;\n  select(tconst, primaryTitle)\n\n# Join with the ratings data to get the success metric for these movies\noscar_winner_ratings &lt;- oscar_winner_movies |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))\n\noscar_winner_ratings |&gt;\n  select(primaryTitle, averageRating, numVotes, success_metric)  |&gt;\n  arrange(desc(success_metric))  |&gt;\n  print()\n\n\n               primaryTitle averageRating numVotes success_metric\n1             The Godfather           9.2  2051186      133.71215\n2              Forrest Gump           8.8  2301630      128.91233\n3          Schindler's List           9.0  1475891      127.84296\n4  The Silence of the Lambs           8.6  1578087      122.73683\n5                 Gladiator           8.5  1658228      121.73072\n6                  Parasite           8.5   993790      117.37890\n7    No Country for Old Men           8.2  1082550      113.93761\n8             The Godfather           8.3     4072       68.99072\n9                 Gladiator           6.5    10651       60.27777\n10                 Parasite           7.4     1869       55.74933\n11            The Godfather           8.3      679       54.13337\n12             Forrest Gump           7.8      540       49.08867\n13                 Parasite           8.5      298       48.45377\n14                Gladiator           7.8      323       45.08980\n15                Gladiator           7.1      449       43.37566\n16            The Godfather           8.8      106       41.12089\n17            The Godfather           7.9      127       38.33104\n18                 Parasite           5.0     1543       36.71066\n19            The Godfather           7.7      100       35.53643\n20             Forrest Gump           7.6      100       35.07492\n21   No Country for Old Men           7.2      101       33.29980\n22                 Parasite           4.1     3143       33.01833\n23            The Godfather           6.5      145       32.39344\n24            The Godfather           5.3      444       32.31979\n25            The Godfather           5.9      216       31.74139\n26                 Parasite           4.9      399       29.35818\n27                 Parasite           2.8      698       18.33902\n\n\nA numerical threshold of what “success” means for a project can be picked by looking at the quantile distribution of ratings across all movies.\n\n\nCode\n# Step 1: Inspect the distribution of the success metric\nsummary(TITLE_RATINGS$success_metric)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.615  33.779  40.232  42.229  49.022 138.772 \n\n\nCode\n# Step 2: Determine the 75th percentile (or another quantile) as the threshold for a 'solid' movie\nthreshold &lt;- quantile(TITLE_RATINGS$success_metric, 0.75)\n\nprint(paste(\"Threshold for a 'solid' movie: \", threshold))\n\n\n[1] \"Threshold for a 'solid' movie:  49.0217313885254\""
  },
  {
    "objectID": "mp02.html#task-4",
    "href": "mp02.html#task-4",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Now, it is time to pick a genre for my movie. For research, I am looking at a couple questions. My first question is What was the genre with the most “successes” in each decade?\n\n\nCode\nsuccessful_movies &lt;- TITLE_RATINGS |&gt;\n  filter(success_metric &gt; threshold)\n\n# Join with imdb_basics to get genre and year information\nsuccessful_movies_with_genres &lt;- successful_movies |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  filter(!is.na(startYear))  # Ensure the movie has a valid start year\n\n# Create a new column for the decade\nsuccessful_movies_with_genres &lt;- successful_movies_with_genres |&gt;\n  mutate(decade = floor(as.numeric(startYear) / 10) * 10)  # Convert year to decade\n\n# Separate genres (if multiple genres are in a single string)\nsuccessful_movies_with_genres &lt;- successful_movies_with_genres |&gt;\n  separate_rows(genres, sep = \",\")  # Separate genres into individual rows if comma-separated\n\n# Group by decade and genre, then count the number of successes per genre in each decade\ngenre_counts_by_decade &lt;- successful_movies_with_genres |&gt;\n  group_by(decade, genres)  |&gt;\n  summarise(success_count = n()) |&gt;\n  arrange(decade, desc(success_count))\n\n# Find the genre with the most successes in each decade\nmost_successful_genres_per_decade &lt;- genre_counts_by_decade |&gt;\n  group_by(decade) |&gt;\n  slice_max(success_count, n = 1)  # Get the genre with the highest count per decade\n\nprint(most_successful_genres_per_decade)\n\n\n# A tibble: 18 × 3\n# Groups:   decade [16]\n   decade genres      success_count\n    &lt;dbl&gt; &lt;chr&gt;               &lt;int&gt;\n 1   1870 Documentary             2\n 2   1870 Short                   2\n 3   1880 Documentary             2\n 4   1880 Short                   2\n 5   1890 Short                  12\n 6   1900 Short                  13\n 7   1910 Comedy                 33\n 8   1920 Drama                 124\n 9   1930 Drama                 328\n10   1940 Drama                 498\n11   1950 Drama                 857\n12   1960 Drama                1235\n13   1970 Drama                1514\n14   1980 Drama                1878\n15   1990 Drama                3877\n16   2000 Drama               10438\n17   2010 Drama               22390\n18   2020 Drama               10070\n\n\n\n\nCode\nggplot(most_successful_genres_per_decade, aes(x = factor(decade), y = success_count, fill = genres)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Most Successful Genres Per Decade\",\n       x = \"Decade\",\n       y = \"Number of Successful Movies\",\n       fill = \"Genre\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nMy next set of questions are what genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?\n\n\nCode\n# Filter for movies produced since 2010 and for successes\nsuccessful_movies_since_2010 &lt;- TITLE_RATINGS |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  filter(as.numeric(startYear) &gt;= 2010)  |&gt;  # Movies from 2010 onwards\n  filter(success_metric &gt; threshold)  # Only successful movies\n\n# Separate genres (in case of multiple genres in a single string)\nsuccessful_movies_since_2010 &lt;- successful_movies_since_2010 |&gt;\n  separate_rows(genres, sep = \",\")\n\n# Count the number of successes per genre\ngenre_success_count &lt;- successful_movies_since_2010 |&gt;\n  group_by(genres)  |&gt;\n  summarise(success_count = n())  |&gt;\n  arrange(desc(success_count))\n\n# Calculate the total number of productions per genre since 2010\ntotal_movies_per_genre &lt;- TITLE_BASICS |&gt;\n  filter(as.numeric(startYear) &gt;= 2010)  |&gt;\n  separate_rows(genres, sep = \",\")  |&gt;\n  group_by(genres) |&gt;\n  summarise(total_count = n())\n\n# Join the success count with the total production count and calculate success rate\ngenre_success_rate &lt;- genre_success_count |&gt;\n  inner_join(total_movies_per_genre, by = \"genres\")  |&gt;\n  mutate(success_rate = success_count / total_count)  |&gt;\n  arrange(desc(success_rate))\n\nggplot(genre_success_rate, aes(x = success_count, y = success_rate, label = genres)) +\n  geom_point(color = \"blue\", size = 3) +\n  geom_text(vjust = -1, size = 3) +  # Add genre labels to the points\n  labs(title = \"Success Rate vs Number of Successes (2010 onwards)\",\n       x = \"Number of Successes\",\n       y = \"Success Rate\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThrough this, I see that drama is still the number one genre to choose, but action, crime, adventure, and comedy are also good genres to pick with high success rate and high success count.\nWith this, I will choose the genre drama! IMDb’s definition of drama is “numerous consecutive scenes of characters portrayed to effect a serious narrative throughout the title, usually involving conflicts and emotions. This can be exaggerated upon to produce melodrama.” Some examples of subgenres under this category are coming-of-age, historical epic, medical drama, and psychological drama. Quite a bit of subgenres are set under this genre!\nParticularly, I am interested in the subgenre Epic, described as “grand and sweeping stories often set against significant historical, cultural, or societal backdrops. Epic dramas are characterized by their scope, scale, and often lengthy runtime, as they aim to capture the grandeur of human experiences, events, and emotions.”"
  },
  {
    "objectID": "mp02.html#task-5-key-personnel",
    "href": "mp02.html#task-5-key-personnel",
    "title": "The Business of Show Business",
    "section": "Task 5 Key Personnel",
    "text": "Task 5 Key Personnel\nBased on my interest in pursuing a drama movie, set in the subgenre epic, I would like to create a team with Christopher Nolan as the director. He has experience in creating drama movies that are “successful”.\n\n\nCode\n# Join Christopher Nolan's projects with the title.basics dataset to get genres\nnolan_projects_with_genres &lt;- nolan_projects %&gt;%\n  inner_join(TITLE_BASICS, by = \"tconst\") %&gt;%\n  separate_rows(genres, sep = \",\") %&gt;%\n  filter(genres == \"Drama\")  # Filter for drama movies\n\n# Join with the ratings dataset to calculate success metrics for drama movies\nnolan_drama_success &lt;- nolan_projects_with_genres %&gt;%\n  inner_join(TITLE_RATINGS, by = \"tconst\") %&gt;%\n  mutate(success_metric = averageRating * log(numVotes + 1))\n\ncat(\"Christopher Nolan's Successful Drama Movies:\\n\")\n\n\nChristopher Nolan's Successful Drama Movies:\n\n\nCode\nprint(nolan_drama_success %&gt;%\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric)))\n\n\n# A tibble: 6 × 5\n  primaryTitle    startYear averageRating numVotes success_metric\n  &lt;chr&gt;               &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n1 The Dark Knight      2008           9    2922922          134. \n2 Interstellar         2014           8.7  2161548          127. \n3 Batman Begins        2005           8.2  1603362          117. \n4 Oppenheimer          2023           8.3   797550          113. \n5 Dunkirk              2017           7.8   752538          106. \n6 Insomnia             2002           7.2   323258           91.3\n\n\nAn established actor I would like to add to the team is Leonardo DiCaprio. Not only is he but he has worked on projects with Christopher Nolan in the past.\n\n\nCode\n# Find Leonardo DiCaprio's nconst (unique identifier for individuals)\nleonardo &lt;- NAME_BASICS %&gt;%\n  filter(primaryName == \"Leonardo DiCaprio\") %&gt;%\n  select(nconst)\n\n# Get all projects where Leonardo DiCaprio is an actor\nleonardo_projects &lt;- TITLE_PRINCIPALS %&gt;%\n  filter(nconst == leonardo$nconst, category == \"actor\") %&gt;%\n  select(tconst)\n\n# Join Leonardo DiCaprio's projects with the ratings data to calculate success metrics\nleonardo_ratings &lt;- leonardo_projects %&gt;%\n  inner_join(TITLE_RATINGS, by = \"tconst\") %&gt;%\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\nleonardo_success &lt;- leonardo_ratings %&gt;%\n  inner_join(TITLE_BASICS, by = \"tconst\") %&gt;%\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\nleonardo_success %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Leonardo DiCaprio's Top Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nLeonardo DiCaprio's Top Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInception\n2010\n8.8\n2595555\n129.96994\n\n\nDjango Unchained\n2012\n8.5\n1729019\n122.08606\n\n\nThe Departed\n2006\n8.5\n1444597\n120.55840\n\n\nThe Wolf of Wall Street\n2013\n8.2\n1620302\n117.24461\n\n\nShutter Island\n2010\n8.2\n1490811\n116.56162\n\n\nCatch Me If You Can\n2002\n8.1\n1120635\n112.82820\n\n\nTitanic\n1997\n7.9\n1305247\n111.24704\n\n\nThe Revenant\n2015\n8.0\n888373\n109.57718\n\n\nBlood Diamond\n2006\n8.0\n594079\n106.35815\n\n\nOnce Upon a Time... in Hollywood\n2019\n7.6\n870617\n103.94489\n\n\nGangs of New York\n2002\n7.5\n478759\n98.09216\n\n\nThe Aviator\n2004\n7.5\n388163\n96.51887\n\n\nDon't Look Up\n2021\n7.2\n616776\n95.99229\n\n\nWhat's Eating Gilbert Grape\n1993\n7.7\n257226\n95.92440\n\n\nThe Great Gatsby\n2013\n7.2\n606478\n95.87106\n\n\nKillers of the Flower Moon\n2023\n7.6\n259270\n94.73878\n\n\nRevolutionary Road\n2008\n7.3\n227157\n90.03383\n\n\nBody of Lies\n2008\n7.0\n241618\n86.76582\n\n\nThe Basketball Diaries\n1995\n7.3\n123141\n85.56398\n\n\nRomeo + Juliet\n1996\n6.7\n247594\n83.21098\n\n\nThe Beach\n2000\n6.6\n256833\n82.21082\n\n\nThis Boy's Life\n1993\n7.3\n59109\n80.20623\n\n\nThe Man in the Iron Mask\n1998\n6.5\n181004\n78.69082\n\n\nThe Man in the Iron Mask\n1998\n6.5\n181004\n78.69082\n\n\nJ. Edgar\n2011\n6.5\n134451\n76.75826\n\n\nThe Quick and the Dead\n1995\n6.5\n105006\n75.15158\n\n\nMarvin's Room\n1996\n6.7\n30396\n69.15806\n\n\nCelebrity\n1998\n6.3\n28697\n64.66687\n\n\nGrowing Pains\n1985\n6.6\n16584\n64.12728\n\n\nHubble\n2010\n7.6\n4537\n63.99384\n\n\nTotal Eclipse\n1995\n6.5\n16978\n63.30826\n\n\nInception: The Cobol Job\n2010\n7.5\n3793\n61.80882\n\n\nThe Audition\n2015\n6.6\n4636\n55.71603\n\n\nIce on Fire\n2019\n7.4\n1701\n55.05274\n\n\nPoison Ivy\n1992\n5.4\n20446\n53.59819\n\n\nDon's Plum\n2001\n5.5\n4818\n46.64177\n\n\nCritters 3\n1991\n4.5\n13492\n42.79467\n\n\nEpisode #27.1\n1979\n8.7\n121\n41.79498\n\n\nThanksgiving with a T That Rhymes with B That Stands for Basketball\n1990\n8.0\n171\n41.17996\n\n\nMenage a Luke\n1992\n7.0\n240\n38.39358\n\n\nStop, Luke and Listen\n1991\n7.0\n239\n38.36447\n\n\nBack to School\n1991\n6.9\n253\n38.20761\n\n\nIn vino veritas\n1991\n7.0\n229\n38.06656\n\n\nCards and Cars\n1990\n7.3\n174\n37.70294\n\n\nFun for Kids\n1991\n7.2\n174\n37.18646\n\n\nThere Must Be a Pony\n1991\n6.8\n229\n36.97894\n\n\nThe Plague\n1990\n7.1\n179\n36.86999\n\n\nGil vs. the Deck\n1990\n7.1\n176\n36.75066\n\n\nI Never Invested for My Father\n1990\n7.1\n172\n36.58837\n\n\nThe Young and the Homeless\n1991\n6.7\n233\n36.55065\n\n\nBad Day Cafe\n1991\n6.7\n229\n36.43513\n\n\nMy Dad Can Beat Up Your BMW\n1990\n7.0\n179\n36.35070\n\n\nThe Truck Stops Here\n1992\n6.6\n240\n36.19966\n\n\nThe Five Fingers of Ben\n1992\n6.6\n232\n35.97685\n\n\nTitanic: 25 Years Later with James Cameron\n2023\n6.5\n246\n35.81102\n\n\nHome Malone\n1991\n6.6\n226\n35.80467\n\n\nSmall Surprises\n1990\n6.9\n178\n35.79296\n\n\nLove Stinks\n1990\n6.8\n176\n35.19782\n\n\nJason Sings the Blues\n1991\n6.5\n221\n35.11740\n\n\nDon't Go Changin'\n1992\n6.4\n235\n34.96852\n\n\nThe Big Fix\n1991\n6.4\n230\n34.83147\n\n\nVicious Cycle\n1992\n6.4\n225\n34.69142\n\n\nHonest Abe\n1992\n6.3\n231\n34.31445\n\n\nThe Call of the Wild\n1992\n6.3\n230\n34.28723\n\n\nIt's Not Easy Being Green\n1991\n6.3\n228\n34.23245\n\n\nB=MC2\n1991\n6.3\n227\n34.20488\n\n\nParenthood\n1990\n5.7\n402\n34.19394\n\n\nThe Kid's Still Got It\n1991\n6.3\n225\n34.14937\n\n\nTake My Parents, Please\n1990\n6.6\n169\n33.89627\n\n\nHollow Halloween\n1990\n6.5\n171\n33.45871\n\n\nEpisode #1.1472\n1990\n6.4\n173\n33.01795\n\n\nThe Foot Shooting Party\n1994\n5.1\n591\n32.55588\n\n\nMaggie's Brilliant Career\n1992\n5.9\n233\n32.18639\n\n\nPaper Tigers\n1991\n5.9\n224\n31.95499\n\n\n\n\n\n\n\nThis table proves that Leonardo DiCaprio is a great actor! An up and coming actor that I would like to bring is Timothée Chalamet. His most recent work is Dune, an American epic science fiction film based off the book series, Dune.\n\n\nCode\n# Find Timothée Chalamet's nconst (unique identifier for individuals)\ntimothee &lt;- NAME_BASICS %&gt;%\n  filter(primaryName == \"Timothée Chalamet\") %&gt;%\n  select(nconst)\n\n# Get all projects where Timothée Chalamet is an actor\ntimothee_projects &lt;- TITLE_PRINCIPALS %&gt;%\n  filter(nconst == timothee$nconst, category == \"actor\") %&gt;%\n  select(tconst)\n\n# Join Timothée Chalamet's projects with the ratings data to calculate success metrics\ntimothee_ratings &lt;- timothee_projects %&gt;%\n  inner_join(TITLE_RATINGS, by = \"tconst\") %&gt;%\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\ntimothee_success &lt;- timothee_ratings %&gt;%\n  inner_join(TITLE_BASICS, by = \"tconst\") %&gt;%\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\ntimothee_success %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Timothée Chalamet's Top Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nTimothée Chalamet's Top Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInterstellar\n2014\n8.7\n2161548\n126.90112\n\n\nDune: Part Two\n2024\n8.5\n518546\n111.84968\n\n\nDune: Part One\n2021\n8.0\n903916\n109.71594\n\n\nCall Me by Your Name\n2017\n7.8\n325336\n99.00241\n\n\nLittle Women\n2019\n7.8\n253631\n97.06039\n\n\nDon't Look Up\n2021\n7.2\n616776\n95.99229\n\n\nLady Bird\n2017\n7.4\n339316\n94.23671\n\n\nBeautiful Boy\n2018\n7.4\n104692\n85.53503\n\n\nThe French Dispatch\n2021\n7.1\n153812\n84.79880\n\n\nWonka\n2023\n7.0\n159203\n83.84559\n\n\nBones and All\n2022\n6.8\n62180\n75.05707\n\n\nEntergalactic\n2022\n7.3\n16550\n70.91367\n\n\nA Rainy Day in New York\n2019\n6.5\n53453\n70.76275\n\n\nMen, Women & Children\n2014\n6.6\n33990\n68.86342\n\n\nHot Summer Nights\n2017\n6.4\n24322\n64.63474\n\n\nMiss Stevens\n2016\n6.6\n7986\n59.30477\n\n\nLove the Coopers\n2015\n5.8\n26963\n59.17310\n\n\nCadillac: How Do You Drive with Scissorhands?\n2021\n8.1\n843\n54.57904\n\n\nThe Adderall Diaries\n2015\n5.2\n6273\n45.46968\n\n\nDune\n2021\n8.0\n187\n41.89154\n\n\nOne and Two\n2015\n5.2\n2420\n40.51807\n\n\nGreat Performers: Horror Show\n2017\n6.5\n334\n37.79185\n\n\nImperfect Storm\n2012\n7.4\n136\n36.40786\n\n\nBleu de Chanel\n2024\n6.7\n201\n35.56539\n\n\nSpinners\n2014\n5.5\n436\n33.43963\n\n\nSweet Tooth\n2008\n6.1\n130\n29.73870\n\n\n\n\n\n\n\nSurprisingly, I did not know that Timothée Chamalet was also in a Christopher Nolan project. With 11 movies above the success threshold, I think Timothée will be a great addition to the team."
  },
  {
    "objectID": "mp02.html#task-6-finding-a-classic-movie-to-remake",
    "href": "mp02.html#task-6-finding-a-classic-movie-to-remake",
    "title": "The Business of Show Business",
    "section": "Task 6 Finding a Classic Movie to Remake",
    "text": "Task 6 Finding a Classic Movie to Remake\nOf course, now it is time to create a killer plot. One way is to look at and remake a classic film. The criteria for a classic film is as follows: * large number of IMDb ratings &gt;100,000 * high average rating &gt;8 * have not been remade in the past 25 years\n\n\nCode\n# Filter for movies released before 1999 (at least 25 years old)\nclassic_movies &lt;- TITLE_BASICS %&gt;%\n  filter(titleType == \"movie\" & as.numeric(startYear) &lt; 1999)\n\n# Join with ratings data to find movies with high ratings and large number of votes\nclassic_movies_with_ratings &lt;- classic_movies %&gt;%\n  inner_join(TITLE_RATINGS, by = \"tconst\") %&gt;%\n  filter(numVotes &gt; 100000 & averageRating &gt; 8.5)  # Filter for high votes and high ratings\n\n#  Sort by highest average rating and number of votes to find top movies\ntop_classic_movies &lt;- classic_movies_with_ratings %&gt;%\n  arrange(desc(averageRating), desc(numVotes))\n\n# Exclude movies that have been remade in the past 25 years\nremade_movies &lt;- TITLE_BASICS %&gt;%\n  filter(titleType == \"remake\" & as.numeric(startYear) &gt;= 1999)\n\n# Filter out remade movies from top classic movies\nclassic_movies_to_remake &lt;- top_classic_movies %&gt;%\n  filter(!tconst %in% remade_movies$tconst)\n\nclassic_movies_to_remake |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes) |&gt;\n  gt() |&gt;\n  tab_header(title = \"Top Classic Movies to Remake\")\n\n\n\n\n\n\n\n\nTop Classic Movies to Remake\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\n\n\n\n\nThe Shawshank Redemption\n1994\n9.3\n2942823\n\n\nThe Godfather\n1972\n9.2\n2051186\n\n\nSchindler's List\n1993\n9.0\n1475891\n\n\nThe Godfather Part II\n1974\n9.0\n1386499\n\n\n12 Angry Men\n1957\n9.0\n884567\n\n\nPulp Fiction\n1994\n8.9\n2260017\n\n\nForrest Gump\n1994\n8.8\n2301630\n\n\nThe Good, the Bad and the Ugly\n1966\n8.8\n824512\n\n\nStar Wars: Episode V - The Empire Strikes Back\n1980\n8.7\n1401591\n\n\nGoodfellas\n1990\n8.7\n1280574\n\n\nOne Flew Over the Cuckoo's Nest\n1975\n8.7\n1087006\n\n\nSe7en\n1995\n8.6\n1836180\n\n\nThe Silence of the Lambs\n1991\n8.6\n1578087\n\n\nSaving Private Ryan\n1998\n8.6\n1521594\n\n\nStar Wars: Episode IV - A New Hope\n1977\n8.6\n1471222\n\n\nTerminator 2: Judgment Day\n1991\n8.6\n1194496\n\n\nLife Is Beautiful\n1997\n8.6\n754383\n\n\nIt's a Wonderful Life\n1946\n8.6\n505818\n\n\nSeven Samurai\n1954\n8.6\n372202\n\n\n\n\n\n\n\nFrom the list, I would like to remake Schindler’s List, a movie based during World War II. Since the movie was made in 1993, I believe most of the cast is still around.\n\n\nCode\n# Find the tconst for Schindler's List\nschindlers_list &lt;- TITLE_BASICS %&gt;%\n  filter(primaryTitle == \"Schindler's List\" & titleType == \"movie\") %&gt;%\n  select(tconst)\n\n# Get key talent (actors, directors, writers) from Schindler's List\nkey_talent &lt;- TITLE_PRINCIPALS %&gt;%\n  filter(tconst == schindlers_list$tconst & category %in% c(\"actor\", \"director\", \"writer\")) %&gt;%\n  select(nconst, category)\n\n# Join with the name.basics dataset to check if they are still alive\nkey_talent_info &lt;- key_talent %&gt;%\n  inner_join(NAME_BASICS, by = \"nconst\") %&gt;%\n  select(primaryName, category, birthYear, deathYear)  # Select relevant info\n\n# Filter for those who are still alive (deathYear is NA)\nstill_alive &lt;- key_talent_info %&gt;%\n  filter(is.na(deathYear))\n\nstill_alive |&gt;\n  gt() |&gt;\n  tab_header(title = \"Key talent from Schindler's List - Still Alive\")\n\n\n\n\n\n\n\n\nKey talent from Schindler's List - Still Alive\n\n\nprimaryName\ncategory\nbirthYear\ndeathYear\n\n\n\n\nLiam Neeson\nactor\n1952\nNA\n\n\nRalph Fiennes\nactor\n1962\nNA\n\n\nBen Kingsley\nactor\n1943\nNA\n\n\nJonathan Sagall\nactor\n1959\nNA\n\n\nShmuel Levy\nactor\n1962\nNA\n\n\nSteven Spielberg\ndirector\n1946\nNA\n\n\nThomas Keneally\nwriter\n1935\nNA\n\n\nSteven Zaillian\nwriter\n1953\nNA"
  },
  {
    "objectID": "mp02.html#the-pitch",
    "href": "mp02.html#the-pitch",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Through the decades, drama films have been increasing in popularity, completely dominating all other genres in the industry with 32,460 movies made since 2010. Combined with other competing genres of adventure, crime, action, and comedy, I would like to create an epic drama.\nThis movie will be directed by Christopher Nolan, an expert at drama movies. With 6 movies in the drama genre, all are above the success metric of 49.02. Alongside director Nolan, I would like to bring on Leonardo DiCaprio, a Hollywood icon who has played various roles throughout his career. Another actor I would like to bring in is Timothee Chalamet who played in Dune, an epic science fiction movie. With Chalamet’s background, he would fit this new movie concept very well. One fun fact is that both actors have worked with director Nolan separately before, on Inception and Interstellar.\nThe story will be based of off Schindler’s List, a 1993 film set in World War II taken from a true story of Oskar Schindler The film focuses on his transformation from a business man to a humanitarian through the factory he runs. This story will captivate today’s audience, as we are continually surrounded by global conflicts.\n\nFrom director Christopher Nolan, the visionary mind behind Oppenheimer,\nFrom actor Leonardo DiCaprio, a Hollywood icon,\nFrom actor Timothee Chalamet, the star of Dune movie series,\nComes a rich historical drama\nA story of war, love, will power, and humanity\nComing soon to a theater near you."
  },
  {
    "objectID": "mp02.html#successful-personnel-in-the-genre",
    "href": "mp02.html#successful-personnel-in-the-genre",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Based on my interest in pursuing a drama movie, set in the subgenre epic, I would like to create a team with Christopher Nolan as the director. He has experience in creating drama movies that are “successful”.\n\n\nCode\n# Join Christopher Nolan's projects with the title.basics dataset to get genres\nnolan_projects_with_genres &lt;- nolan_projects |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  separate_rows(genres, sep = \",\")  |&gt;\n  filter(genres == \"Drama\")  # Filter for drama movies\n\n# Join with the ratings dataset to calculate success metrics for drama movies\nnolan_drama_success &lt;- nolan_projects_with_genres |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))\n\nnolan_drama_success |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric)  |&gt;\n  arrange(desc(success_metric)) |&gt;\n  gt()  |&gt;\n  tab_header(\n    title = \"Christopher Nolan's Successful Drama Movies\"\n  )\n\n\n\n\n\n\n\n\nChristopher Nolan's Successful Drama Movies\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nThe Dark Knight\n2008\n9.0\n2922922\n133.99285\n\n\nInterstellar\n2014\n8.7\n2161548\n126.90112\n\n\nBatman Begins\n2005\n8.2\n1603362\n117.15843\n\n\nOppenheimer\n2023\n8.3\n797550\n112.79120\n\n\nDunkirk\n2017\n7.8\n752538\n105.54342\n\n\nInsomnia\n2002\n7.2\n323258\n91.34071\n\n\n\n\n\n\n\nAn established actor I would like to add to the team is Leonardo DiCaprio. Not only is he but he has worked on projects with Christopher Nolan in the past.\n\n\nCode\n# Find Leonardo DiCaprio's nconst (unique identifier for individuals)\nleonardo &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Leonardo DiCaprio\")  |&gt;\n  select(nconst)\n\n# Get all projects where Leonardo DiCaprio is an actor\nleonardo_projects &lt;- TITLE_PRINCIPALS |&gt;\n  filter(nconst == leonardo$nconst, category == \"actor\")  |&gt;\n  select(tconst)\n\n# Join Leonardo DiCaprio's projects with the ratings data to calculate success metrics\nleonardo_ratings &lt;- leonardo_projects |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\nleonardo_success &lt;- leonardo_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\nleonardo_success |&gt;\n  head(10) |&gt;\n  gt() %&gt;%\n  tab_header(\n    title = \"Leonardo DiCaprio's Top 10 Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nLeonardo DiCaprio's Top 10 Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInception\n2010\n8.8\n2595555\n129.9699\n\n\nDjango Unchained\n2012\n8.5\n1729019\n122.0861\n\n\nThe Departed\n2006\n8.5\n1444597\n120.5584\n\n\nThe Wolf of Wall Street\n2013\n8.2\n1620302\n117.2446\n\n\nShutter Island\n2010\n8.2\n1490811\n116.5616\n\n\nCatch Me If You Can\n2002\n8.1\n1120635\n112.8282\n\n\nTitanic\n1997\n7.9\n1305247\n111.2470\n\n\nThe Revenant\n2015\n8.0\n888373\n109.5772\n\n\nBlood Diamond\n2006\n8.0\n594079\n106.3582\n\n\nOnce Upon a Time... in Hollywood\n2019\n7.6\n870617\n103.9449\n\n\n\n\n\n\n\nThis table proves that Leonardo DiCaprio is a great actor! An up and coming actor that I would like to bring is Timothée Chalamet. His most recent work is Dune, an American epic science fiction film based off the book series, Dune.\n\n\nCode\n# Find Timothée Chalamet's nconst (unique identifier for individuals)\ntimothee &lt;- NAME_BASICS |&gt;\n  filter(primaryName == \"Timothée Chalamet\")  |&gt;\n  select(nconst)\n\n# Get all projects where Timothée Chalamet is an actor\ntimothee_projects &lt;- TITLE_PRINCIPALS |&gt;\n  filter(nconst == timothee$nconst, category == \"actor\")  |&gt;\n  select(tconst)\n\n# Join Timothée Chalamet's projects with the ratings data to calculate success metrics\ntimothee_ratings &lt;- timothee_projects |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  mutate(success_metric = averageRating * log(numVotes + 1))  # Success metric calculation\n\n# Join with title.basics to get the titles and release years for validation\ntimothee_success &lt;- timothee_ratings |&gt;\n  inner_join(TITLE_BASICS, by = \"tconst\")  |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes, success_metric) %&gt;%\n  arrange(desc(success_metric))\n\ntimothee_success |&gt;\n  head(10)  |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Timothée Chalamet's Top 10 Movies by Success Metric\"\n  )\n\n\n\n\n\n\n\n\nTimothée Chalamet's Top 10 Movies by Success Metric\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\nsuccess_metric\n\n\n\n\nInterstellar\n2014\n8.7\n2161548\n126.90112\n\n\nDune: Part Two\n2024\n8.5\n518546\n111.84968\n\n\nDune: Part One\n2021\n8.0\n903916\n109.71594\n\n\nCall Me by Your Name\n2017\n7.8\n325336\n99.00241\n\n\nLittle Women\n2019\n7.8\n253631\n97.06039\n\n\nDon't Look Up\n2021\n7.2\n616776\n95.99229\n\n\nLady Bird\n2017\n7.4\n339316\n94.23671\n\n\nBeautiful Boy\n2018\n7.4\n104692\n85.53503\n\n\nThe French Dispatch\n2021\n7.1\n153812\n84.79880\n\n\nWonka\n2023\n7.0\n159203\n83.84559\n\n\n\n\n\n\n\nSurprisingly, I did not know that Timothée Chamalet was also in a Christopher Nolan project. With 11 movies above the success threshold, I think Timothée will be a great addition to the team."
  },
  {
    "objectID": "mp02.html#nostalgia-and-remakes",
    "href": "mp02.html#nostalgia-and-remakes",
    "title": "The Business of Show Business",
    "section": "",
    "text": "Of course, now it is time to create a killer plot. One way is to look at and remake a classic film. The criteria for a classic film is as follows: * large number of IMDb ratings &gt;100,000 * high average rating &gt;8 * have not been remade in the past 25 years\n\n\nCode\n# Filter for movies released before 1999 (at least 25 years old)\nclassic_movies &lt;- TITLE_BASICS |&gt;\n  filter(titleType == \"movie\" & as.numeric(startYear) &lt; 1999)\n\n# Join with ratings data to find movies with high ratings and large number of votes\nclassic_movies_with_ratings &lt;- classic_movies |&gt;\n  inner_join(TITLE_RATINGS, by = \"tconst\")  |&gt;\n  filter(numVotes &gt; 100000 & averageRating &gt; 8.5)  # Filter for high votes and high ratings\n\n#  Sort by highest average rating and number of votes to find top movies\ntop_classic_movies &lt;- classic_movies_with_ratings |&gt;\n  arrange(desc(averageRating), desc(numVotes))\n\n# Exclude movies that have been remade in the past 25 years\nremade_movies &lt;- TITLE_BASICS  |&gt;\n  filter(titleType == \"remake\" & as.numeric(startYear) &gt;= 1999)\n\n# Filter out remade movies from top classic movies\nclassic_movies_to_remake &lt;- top_classic_movies |&gt;\n  filter(!tconst %in% remade_movies$tconst)\n\nclassic_movies_to_remake |&gt;\n  select(primaryTitle, startYear, averageRating, numVotes) |&gt;\n  gt() |&gt;\n  tab_header(title = \"Top Classic Movies to Remake\")\n\n\n\n\n\n\n\n\nTop Classic Movies to Remake\n\n\nprimaryTitle\nstartYear\naverageRating\nnumVotes\n\n\n\n\nThe Shawshank Redemption\n1994\n9.3\n2942823\n\n\nThe Godfather\n1972\n9.2\n2051186\n\n\nSchindler's List\n1993\n9.0\n1475891\n\n\nThe Godfather Part II\n1974\n9.0\n1386499\n\n\n12 Angry Men\n1957\n9.0\n884567\n\n\nPulp Fiction\n1994\n8.9\n2260017\n\n\nForrest Gump\n1994\n8.8\n2301630\n\n\nThe Good, the Bad and the Ugly\n1966\n8.8\n824512\n\n\nStar Wars: Episode V - The Empire Strikes Back\n1980\n8.7\n1401591\n\n\nGoodfellas\n1990\n8.7\n1280574\n\n\nOne Flew Over the Cuckoo's Nest\n1975\n8.7\n1087006\n\n\nSe7en\n1995\n8.6\n1836180\n\n\nThe Silence of the Lambs\n1991\n8.6\n1578087\n\n\nSaving Private Ryan\n1998\n8.6\n1521594\n\n\nStar Wars: Episode IV - A New Hope\n1977\n8.6\n1471222\n\n\nTerminator 2: Judgment Day\n1991\n8.6\n1194496\n\n\nLife Is Beautiful\n1997\n8.6\n754383\n\n\nIt's a Wonderful Life\n1946\n8.6\n505818\n\n\nSeven Samurai\n1954\n8.6\n372202\n\n\n\n\n\n\n\nFrom the list, I would like to remake Schindler’s List, a movie based during World War II. Since the movie was made in 1993, I believe most of the cast is still around.\n\n\nCode\n# Find the tconst for Schindler's List\nschindlers_list &lt;- TITLE_BASICS |&gt;\n  filter(primaryTitle == \"Schindler's List\" & titleType == \"movie\")  |&gt;\n  select(tconst)\n\n# Get key talent (actors, directors, writers) from Schindler's List\nkey_talent &lt;- TITLE_PRINCIPALS  |&gt;\n  filter(tconst == schindlers_list$tconst & category %in% c(\"actor\", \"director\", \"writer\")) |&gt;\n  select(nconst, category)\n\n# Join with the name.basics dataset to check if they are still alive\nkey_talent_info &lt;- key_talent |&gt;\n  inner_join(NAME_BASICS, by = \"nconst\") |&gt;\n  select(primaryName, category, birthYear, deathYear)  # Select relevant info\n\n# Filter for those who are still alive (deathYear is NA)\nstill_alive &lt;- key_talent_info  |&gt;\n  filter(is.na(deathYear))\n\nstill_alive |&gt;\n  gt() |&gt;\n  tab_header(title = \"Key talent from Schindler's List - Still Alive\")\n\n\n\n\n\n\n\n\nKey talent from Schindler's List - Still Alive\n\n\nprimaryName\ncategory\nbirthYear\ndeathYear\n\n\n\n\nLiam Neeson\nactor\n1952\nNA\n\n\nRalph Fiennes\nactor\n1962\nNA\n\n\nBen Kingsley\nactor\n1943\nNA\n\n\nJonathan Sagall\nactor\n1959\nNA\n\n\nShmuel Levy\nactor\n1962\nNA\n\n\nSteven Spielberg\ndirector\n1946\nNA\n\n\nThomas Keneally\nwriter\n1935\nNA\n\n\nSteven Zaillian\nwriter\n1953\nNA"
  },
  {
    "objectID": "mp03.html",
    "href": "mp03.html",
    "title": "Political Fact-Check",
    "section": "",
    "text": "Data I\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(kableExtra)\n\nWarning: package 'kableExtra' was built under R version 4.4.2\n\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(scales)\nlibrary(sf)\n\nWarning: package 'sf' was built under R version 4.4.2\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\nlibrary(gganimate)\n\nWarning: package 'gganimate' was built under R version 4.4.2\n\n\nNo renderer backend detected. gganimate will default to writing frames to separate files\nConsider installing:\n- the `gifski` package for gif output\n- the `av` package for video output\nand restarting the R session\n\n\n\n#location of files\nsetwd(\"C:/Users/greazy/Documents/STA9750-2024-FALL\")\n\nhouse &lt;- read.csv(\"1976-2022-house.csv\")\npresident &lt;- read.csv(\"1976-2020-president.csv\")\n\nData II\nTask 1\n\nget_boundary_lines &lt;- function(fname){\n    BASE_URL &lt;- \"https://cdmaps.polisci.ucla.edu/shp/\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\n\n# 94 to 112 : 1976 to 2012\nget_boundary_lines(\"districts094\")\nget_boundary_lines(\"districts095\")\nget_boundary_lines(\"districts096\")\nget_boundary_lines(\"districts097\")\nget_boundary_lines(\"districts098\")\nget_boundary_lines(\"districts099\")\nget_boundary_lines(\"districts100\")\nget_boundary_lines(\"districts101\")\nget_boundary_lines(\"districts102\")\nget_boundary_lines(\"districts103\")\nget_boundary_lines(\"districts104\")\nget_boundary_lines(\"districts105\")\nget_boundary_lines(\"districts106\")\nget_boundary_lines(\"districts107\")\nget_boundary_lines(\"districts108\")\nget_boundary_lines(\"districts109\")\nget_boundary_lines(\"districts110\")\nget_boundary_lines(\"districts111\")\nget_boundary_lines(\"districts112\")\n\nData III\nTask 2\n\ncensus_2014 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2014/CD/tl_2014_us_cd114.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2014(\"tl_2014_us_cd114.zip\")\n\ncensus_2015 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2015/CD/tl_2015_us_cd114.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2015(\"tl_2015_us_cd114.zip\")\n\ncensus_2016 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2016/CD/tl_2016_us_cd115.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2016(\"tl_2016_us_cd115.zip\")\n\ncensus_2017 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2017/CD/tl_2017_us_cd115.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2017(\"tl_2017_us_cd115.zip\")\n\ncensus_2018 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2018/CD/tl_2018_us_cd116.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2018(\"tl_2018_us_cd116.zip\")\n\ncensus_2019 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2019/CD/tl_2019_us_cd116.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2019(\"tl_2019_us_cd116.zip\")\n\ncensus_2020 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2020/CD/tl_2020_us_cd116.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2020(\"tl_2020_us_cd116.zip\")\n\ncensus_2021 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2021/CD/tl_2021_us_cd116.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2021(\"tl_2021_us_cd116.zip\")\n\ncensus_2022 &lt;- function(fname){\n    BASE_URL &lt;- \"www2.census.gov/geo/tiger/TIGER2022/CD/tl_2022_us_cd116.zip\"\n    fname_ext &lt;- paste0(fname, \".zip\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n}\ncensus_2022(\"tl_2022_us_cd116.zip\")\n\nInitial Exploration of Vote Count Data\n\nWhich states have gained and lost the most seats in the US House of Representatives between 1976 and 2022?\n\n\n# Filter data for 1976 and 2022\nhouse_1976 &lt;- subset(house, year == 1976)\nhouse_2022 &lt;- subset(house, year == 2022)\n\n# Count the number of seats per state in 1976 and 2022\nseats_1976 &lt;- aggregate(state_po ~ state, data = house_1976, FUN = length)\nseats_2022 &lt;- aggregate(state_po ~ state, data = house_2022, FUN = length)\n\n# Rename columns for clarity\ncolnames(seats_1976) &lt;- c(\"state\", \"seats_1976\")\ncolnames(seats_2022) &lt;- c(\"state\", \"seats_2022\")\n\nseats_change &lt;- merge(seats_1976, seats_2022, by = \"state\", all = TRUE)\n\nseats_change$seat_diff &lt;- seats_change$seats_2022 - seats_change$seats_1976\n\n# Sort to find the states with the most gain or loss\nseats_change &lt;- seats_change[order(seats_change$seat_diff, decreasing = TRUE), ]\n\nseats_change %&gt;%\n  mutate(seat_diff = ifelse(seat_diff &gt; 0, \n                            cell_spec(seat_diff, color = \"green\"), \n                            cell_spec(seat_diff, color = \"red\"))) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"Change in House Seats by State (1976-2022)\") %&gt;%\n  kable_styling(\"striped\", full_width = F)\n\n\nChange in House Seats by State (1976-2022)\n\n\n\nstate\nseats_1976\nseats_2022\nseat_diff\n\n\n\n\n9\nFLORIDA\n29\n72\n43\n\n\n43\nTEXAS\n52\n93\n41\n\n\n6\nCOLORADO\n16\n33\n17\n\n\n3\nARIZONA\n13\n26\n13\n\n\n42\nTENNESSEE\n27\n37\n10\n\n\n37\nOREGON\n14\n23\n9\n\n\n44\nUTAH\n6\n15\n9\n\n\n1\nALABAMA\n19\n27\n8\n\n\n20\nMARYLAND\n18\n26\n8\n\n\n18\nLOUISIANA\n16\n22\n6\n\n\n28\nNEVADA\n5\n11\n6\n\n\n45\nVERMONT\n3\n9\n6\n\n\n50\nWYOMING\n2\n7\n5\n\n\n4\nARKANSAS\n7\n11\n4\n\n\n5\nCALIFORNIA\n100\n104\n4\n\n\n15\nIOWA\n17\n21\n4\n\n\n19\nMAINE\n5\n9\n4\n\n\n25\nMISSOURI\n23\n27\n4\n\n\n33\nNORTH CAROLINA\n28\n32\n4\n\n\n47\nWASHINGTON\n26\n30\n4\n\n\n23\nMINNESOTA\n25\n28\n3\n\n\n26\nMONTANA\n4\n7\n3\n\n\n31\nNEW MEXICO\n5\n8\n3\n\n\n46\nVIRGINIA\n32\n35\n3\n\n\n2\nALASKA\n3\n5\n2\n\n\n10\nGEORGIA\n27\n29\n2\n\n\n14\nINDIANA\n24\n26\n2\n\n\n11\nHAWAII\n8\n9\n1\n\n\n12\nIDAHO\n4\n5\n1\n\n\n29\nNEW HAMPSHIRE\n5\n6\n1\n\n\n39\nRHODE ISLAND\n6\n7\n1\n\n\n40\nSOUTH CAROLINA\n20\n21\n1\n\n\n34\nNORTH DAKOTA\n3\n3\n0\n\n\n32\nNEW YORK\n159\n158\n-1\n\n\n49\nWISCONSIN\n31\n30\n-1\n\n\n8\nDELAWARE\n6\n4\n-2\n\n\n48\nWEST VIRGINIA\n8\n6\n-2\n\n\n17\nKENTUCKY\n20\n17\n-3\n\n\n24\nMISSISSIPPI\n12\n9\n-3\n\n\n27\nNEBRASKA\n10\n7\n-3\n\n\n41\nSOUTH DAKOTA\n5\n2\n-3\n\n\n21\nMASSACHUSETTS\n41\n36\n-5\n\n\n36\nOKLAHOMA\n19\n13\n-6\n\n\n7\nCONNECTICUT\n27\n19\n-8\n\n\n16\nKANSAS\n17\n9\n-8\n\n\n30\nNEW JERSEY\n65\n53\n-12\n\n\n13\nILLINOIS\n66\n46\n-20\n\n\n35\nOHIO\n64\n33\n-31\n\n\n38\nPENNSYLVANIA\n67\n32\n-35\n\n\n22\nMICHIGAN\n97\n51\n-46\n\n\n\n\n\n\n\n\nAre there any elections in our data where the election would have had a different outcome if the “fusion” system was not used and candidates only received the votes their received from their “major party line” (Democrat or Republican) and not their total number of votes across all lines?\n\n\n# Filter to only include New York elections (where fusion voting applies)\nny_house &lt;- subset(house, state_po == \"NY\")\n\nny_house &lt;- ny_house %&gt;%\n  filter(!candidate %in% c(\"BLANK VOTE/SCATTERING\"))\n\n# Separate out major party line votes (fusion_ticket == FALSE)\nny_major_party_votes &lt;- ny_house %&gt;%\n  filter(fusion_ticket == FALSE) %&gt;%  # Only include votes cast on major party lines\n  group_by(year, district, candidate) %&gt;%\n  summarise(major_party_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'year', 'district'. You can override using\nthe `.groups` argument.\n\n# Sum total votes across all lines (fusion votes included)\nny_total_votes &lt;- ny_house %&gt;%\n  group_by(year, district, candidate) %&gt;%\n  summarise(total_votes = sum(totalvotes, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'year', 'district'. You can override using\nthe `.groups` argument.\n\n# Merge total votes and major party-only votes\nny_results &lt;- merge(ny_total_votes, ny_major_party_votes, by = c(\"year\", \"district\", \"candidate\"), all.x = TRUE)\n\n# Get the winners under both systems: total votes (fusion) and major-party-only votes\nny_results &lt;- ny_results %&gt;%\n  group_by(year, district) %&gt;%\n  mutate(\n    fusion_winner = candidate[which.max(total_votes)],  # Winner using total (fusion) votes\n    major_party_winner = ifelse(sum(major_party_votes) &gt; 0, candidate[which.max(major_party_votes)], NA)  # Check if major party votes exist\n  ) %&gt;%\n  ungroup()\n\n# Find cases where the winners differ\nny_different_outcome &lt;- ny_results %&gt;%\n  filter(fusion_winner != major_party_winner) %&gt;%\n  select(year, district, fusion_winner, major_party_winner) %&gt;%\n  distinct()\n\n\n# Display an interactive table with DT::datatable\ndatatable(ny_different_outcome, \n          options = list(pageLength = 5, autoWidth = TRUE), \n          caption = 'New York Elections with Different Outcomes Under Fusion Voting')\n\n\n\n\n\n\nDo presidential candidates tend to run ahead of or run behind congressional candidates in the same state? That is, does a Democratic candidate for president tend to get more votes in a given state than all Democratic congressional candidates in the same state?\n\n\n# Filter for Democratic candidates in presidential data\ndem_presidential_votes &lt;- president %&gt;%\n  filter(party_detailed == \"DEMOCRAT\") %&gt;%\n  group_by(year, state_po) %&gt;%\n  summarise(presidential_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n# Filter for Democratic candidates in congressional data\ndem_congressional_votes &lt;- house %&gt;%\n  filter(party == \"DEMOCRAT\") %&gt;%\n  group_by(year, state_po) %&gt;%\n  summarise(congressional_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n# Merge presidential and congressional votes by year and state\nvotes_comparison &lt;- merge(dem_presidential_votes, dem_congressional_votes, by = c(\"year\", \"state_po\"))\n\n# Calculate difference to see where presidential votes are higher\nvotes_comparison &lt;- votes_comparison %&gt;%\n  mutate(president_more_votes = presidential_votes &lt; congressional_votes)\n\nvotes_long &lt;- votes_comparison %&gt;%\n  select(year, state_po, presidential_votes, congressional_votes) %&gt;%\n  pivot_longer(cols = c(\"presidential_votes\", \"congressional_votes\"),\n               names_to = \"vote_type\",\n               values_to = \"votes\")\n\n# Plot with ggplot2\nggplot(votes_long, aes(x = state_po, y = votes, fill = vote_type)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Comparison of Democratic Presidential and Congressional Votes by State\",\n       x = \"State\",\n       y = \"Number of Votes\",\n       fill = \"Vote Type\") +\n  scale_y_continuous(labels = comma) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\n\n\n\n\nImporting and Plotting Shape File Data\nTask 4\n\n##-\nread_shp_from_zip &lt;- function(shpfile) {\n  td &lt;- tempdir()\n  zip_contents &lt;- unzip(shpfile, exdir = td)\n  shp &lt;- zip_contents[grepl(\"\\\\.shp$\", zip_contents)]\n  us_sf &lt;- read_sf(shp)\n  return(us_sf) \n}\n\nshpfile &lt;- \"districts106.zip\"\nshapes &lt;- read_shp_from_zip(shpfile)\n\n\npresident_2000 &lt;- president %&gt;%\n  filter(year == 2000) %&gt;%\n  group_by(state, party_simplified) %&gt;%\n  summarise(total_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  group_by(state) |&gt; \n  slice_max(total_votes, n = 1) |&gt;\n  ungroup() |&gt;\n  select(state, party_simplified)\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\nshapes_us_2000 &lt;- shapes |&gt;\n  mutate(STATENAME = toupper(trimws(STATENAME))) |&gt; # need to match the characters from both tables to join correctly\n  left_join(\n    president_2000,\n    join_by(STATENAME == state)\n  )\n\n\nggplot(shapes_us_2000,\n  aes(\n    geometry = geometry,\n    fill = party_simplified\n  ),\n  color = \"black\"\n) +\n  geom_sf() +\n  scale_fill_manual(values = c(\"DEMOCRAT\" = \"skyblue3\", \"REPUBLICAN\" = \"firebrick1\")) +\n  theme_minimal() +\n  labs(\n    title = \"Presidential Election State Results 2000\",\n    subtitle = \"Choropleth Map of U.S. Districts\",\n    fill = \"Winning Party\"\n  ) +\n  theme(legend.position = \"bottom\") +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 50), expand = FALSE)\n\n\n\n\n\n\n\n\nTask 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\n\n# Load and prepare the president data for multiple years (e.g., 2000, 2004, 2008, etc.)\n\npresident_multiyear &lt;- president %&gt;%\n  filter(year %in% c(2000, 2004, 2008, 2012, 2016, 2020)) %&gt;%  # Specify years of interest\n  group_by(year, state, party_simplified) %&gt;%\n  summarise(total_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  group_by(year, state) %&gt;%\n  slice_max(total_votes, n = 1) %&gt;%\n  ungroup() %&gt;%\n  select(year, state, party_simplified)\n\n`summarise()` has grouped output by 'year', 'state'. You can override using the\n`.groups` argument.\n\n# Prepare shapes data and join with election data\nshapes_us_multiyear &lt;- shapes %&gt;%\n  mutate(STATENAME = toupper(trimws(STATENAME))) %&gt;%  # Ensure state names match\n  left_join(\n    president_multiyear,\n    by = c(\"STATENAME\" = \"state\")\n  )\n\nWarning in sf_column %in% names(g): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 5 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n# Plot the faceted map with ggplot2\nggplot(shapes_us_multiyear) +\n  geom_sf(aes(geometry = geometry, fill = party_simplified), color = \"black\") +\n  scale_fill_manual(values = c(\"DEMOCRAT\" = \"skyblue3\", \"REPUBLICAN\" = \"firebrick1\"), na.value = \"gray80\") +\n  theme_minimal() +\n  labs(\n    title = \"Presidential Election State Results\",\n    subtitle = \"Choropleth Maps of U.S. States by Year\",\n    fill = \"Winning Party\"\n  ) +\n  theme(legend.position = \"bottom\") +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 50), expand = FALSE) +\n  facet_wrap(~ year, ncol = 1)  # One column, with each row representing a different year\n\n\n\n\n\n\n\n\nTask 6: Advanced Chloropleth Visualization of Electoral College Results\n\n# Prepare the election data for multiple years\npresident_multi_year &lt;- president %&gt;%\n  filter(year %in% c(2000, 2004, 2008, 2012, 2016, 2020)) %&gt;%  # Filter for specific years\n  group_by(year, state, party_simplified) %&gt;%\n  summarise(total_votes = sum(candidatevotes, na.rm = TRUE)) %&gt;%\n  group_by(year, state) %&gt;%\n  slice_max(total_votes, n = 1) %&gt;%  # Get the party with max votes for each state and year\n  ungroup() %&gt;%\n  select(year, state, party_simplified)\n\n`summarise()` has grouped output by 'year', 'state'. You can override using the\n`.groups` argument.\n\n# Join with shapefile data\nshapes_us_multi &lt;- shapes %&gt;%\n  mutate(STATENAME = toupper(trimws(STATENAME))) %&gt;%  # Ensure consistent capitalization and trimming\n  left_join(\n    president_multi_year,\n    by = c(\"STATENAME\" = \"state\")  # Join by state name\n  )\n\nWarning in sf_column %in% names(g): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 5 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n# Plot with facets for each year\nggplot(shapes_us_multi, aes(geometry = geometry, fill = party_simplified)) +\n  geom_sf(color = \"black\") +\n  scale_fill_manual(values = c(\"DEMOCRAT\" = \"skyblue3\", \"REPUBLICAN\" = \"firebrick1\")) +\n  theme_minimal() +\n  labs(\n    title = \"Presidential Election State Results Over Time\",\n    subtitle = \"Faceted Choropleth Map of U.S. Districts by Year\",\n    fill = \"Winning Party\"\n  ) +\n  facet_wrap(~ year) +  # Facet by year to create separate maps for each election\n  theme(legend.position = \"bottom\") +\n  coord_sf(xlim = c(-130, -60), ylim = c(20, 50), expand = FALSE)"
  }
]
---
title: "mp01"
editor: visual
---

---
title: "mp01"
author: "Gracie Zheng"
---

#Fiscal Characteristics of Major US Public Transit Systems

In this mini project, I will be analyzing the fiscal characteristics of public transit systems in the United States through summary statistics and coming to the conclusion of which is the most efficient transit system.

Given the data, I am downloading the files and

```{r, echo=FALSE}
if(!require("tidyverse")) install.packages("tidyverse")
```

```{r, echo = TRUE, message = FALSE}
library(tidyverse)

FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
  select(-`State/Parent NTD ID`, 
         -`Reporter Type`,
         -`Reporting Module`,
         -`TOS`,
         -`Passenger Paid Fares`,
         -`Organization Paid Fares`) |>
  filter(`Expense Type` == "Funds Earned During Period") |>
  select(-`Expense Type`) |>
  group_by(`NTD ID`,       
           `Agency Name`,  
           `Mode`) |>      
  summarize(`Total Fares` = sum(`Total Fares`)) |>
  ungroup()
```

# Next, expenses

```{r}
if(!file.exists("2022_expenses.csv")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "2022_expenses.csv" in your project
  # directory.
  download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                destfile="2022_expenses.csv", 
                quiet=FALSE, 
                method="wget")
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
  select(`NTD ID`, 
         `Agency`,
         `Total`, 
         `Mode`) |>
  mutate(`NTD ID` = as.integer(`NTD ID`)) |>
  rename(Expenses = Total) |>
  group_by(`NTD ID`, `Mode`) |>
  summarize(Expenses = sum(Expenses)) |>
  ungroup()

FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```

# Monthly Transit Numbers

```{r}
library(tidyverse)
if(!file.exists("ridership.xlsx")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "ridership.xlsx" in your project
  # directory.
  download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                destfile="ridership.xlsx", 
                quiet=FALSE, 
                method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`), 
               names_to="month", 
               values_to="UPT") |>
  drop_na() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`), 
               names_to="month", 
               values_to="VRM") |>
  drop_na() |>
  group_by(`NTD ID`, `Agency`, `UZA Name`, 
           `Mode`, `3 Mode`, month) |>
  summarize(VRM = sum(VRM)) |>
  ungroup() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
  mutate(`NTD ID` = as.integer(`NTD ID`))
```

#### Load the table with this code:

```{r}
if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |> 
  mutate(month=as.character(month)) |> 
  DT::datatable()
```

### Task 1

First, I am renaming the "UZA Name" column to "metro_area".

```{R}
USAGE <- USAGE |>
       rename(metro_area = `UZA Name`)
```

### Task 2

```{R, warning=FALSE, message=FALSE}
unique_modes <- USAGE |> 
  distinct(Mode)

USAGE <- USAGE |>
  mutate(Mode=case_when(
    Mode == "HR" ~ "Heavy Rail",
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Bus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail and Automated Guideway modes",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Alaska Railroad",
    Mode == "TR" ~ "Aerial Tramways",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"))
```

Then I reload the table with this code to make it look neater:

```{R}
if(!require("DT")) install.packages("DT")
library(DT)
 
datatable(
    sample_n(USAGE, 1000) |>
      mutate(month = as.character(month)) |>
      select(-`3 Mode`) |>
      rename(
        `Metro Area` = metro_area,
        `Unlinked Passenger Trips` = UPT,
        `Vehicle Revenue Miles` = VRM
      )
)
```

### Task 3

1.  What transit *agency* had the most total VRM in our data set?

```{R}
  most_vrm_agency <- USAGE |>
  group_by(Agency) |>
  summarize(total_vrm = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_vrm)) |>
  slice(1)
print (most_vrm_agency)
```

The MTA New York City Transit had the most total VRM at 10832855350 miles.

2.  What transit *mode* had the most total VRM in our data set?

```{R}
  most_vrm_mode <- USAGE |>
  group_by(Mode) |>
  summarize(total_vrm = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_vrm)) |>
  slice(1)
print (most_vrm_mode)
```

Bus mode had the most total VRM at 49444494088.

3.  How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?

```{R}
nyc_subway_trips_may_2024 <- USAGE |>
  filter(Mode == "Heavy Rail", 
         Agency == "MTA New York City Transit",
         month == "2024-05-01")
print(nyc_subway_trips_may_2024)
```

4.  How much did NYC subway ridership fall between April 2019 and April 2020?

```{r}
april_fall <- USAGE |> 
  filter(
    Mode == "Heavy Rail",    # Focus on subway (Heavy Rail)
    Agency == "MTA New York City Transit", 
    month %in% c("2019-04-01", "2020-04-01")  # Only April 2019 and April 2020
  ) |> 
  group_by(month) |>       # Group by month
  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |>   # Summarize total UPT for each month
  spread(month, total_UPT) |>   # Spread the month column to calculate difference
  mutate(april_fall = `2019-04-01` - `2020-04-01`)  # Calculate ridership fall
print(april_fall)
```

#### Task 4

1.  Which 3 Metro Areas have the lowest amount of Vehicle Revenue Miles?

```{r}
least3_vrm_metro <- USAGE |> 
  group_by(metro_area) |> 
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |> 
  arrange(total_VRM) |> 
  slice(3)
print(least3_vrm_metro)
```

2.  Which Metro Area Had the Highest Vehicle Revenue Miles (VRM) per Trip?

This question is aimed to find the metro area that covers the most distance per rider.

```{r}
vrm_per_trip_metro <- USAGE |> 
  group_by(metro_area) |> 
  summarize(total_VRM = sum(VRM, na.rm = TRUE), 
            total_UPT = sum(UPT, na.rm = TRUE)) |> 
  mutate(vrm_per_trip = total_VRM / total_UPT) |> 
  arrange(desc(vrm_per_trip)) |> 
  slice(1)
print(vrm_per_trip_metro)
```

3.  Which Agency is busiest in December?

```{r}
busiest_agency_december <- USAGE |> 
  filter(format(as.Date(month), "%m") == "12") |>  # Filter for December
  group_by(Agency) |> 
  summarize(total_UPT = sum(UPT, na.rm = TRUE)) |> 
  arrange(desc(total_UPT)) |> 
  slice(1)
print(busiest_agency_december)
```

I am not sure what I was expecting, but it was not NYC. I had a belief that people would go back home to see their family; I forgot about tourism and that the ridership is NYC is *extremely* high at all times of the year.

### Task 5

```{r}
usage_2022_annual <- USAGE |>
filter(year(month) == "2022") |>
  group_by(
    `NTD ID`,
    Agency,
    metro_area,
    Mode) |>
  summarise(
    Total_VRM = sum(VRM, na.rm = TRUE),
    Total_UPT = sum(UPT, na.rm = TRUE),
    .groups = 'drop'
  ) |>
  ungroup()
print(usage_2022_annual)
```

Recall the FINANCIALS table we created in the beginning I am also renaming the modes for financials so it shows in the table.

```{r}
print(FINANCIALS)

FINANCIALS <- FINANCIALS |>
  mutate(Mode = case_when(
    Mode == "HR" ~ "Heavy Rail",
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Bus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail and Automated Guideway modes",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Alaska Railroad",
    Mode == "TR" ~ "Aerial Tramways",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"
  ))
```

Following this code, the two tables are merged:

```{r}
USAGE_AND_FINANCIALS <- left_join(usage_2022_annual, 
           FINANCIALS, 
           join_by(`NTD ID`, Mode)) |>
    drop_na()
```

Let's show the first 1,000!

```{r}
sample_n(USAGE_AND_FINANCIALS, 1000) 
```

### Task 6

Which transit system (agency and mode) had the most UPT in 2022?

```{r}
most_upt_2022 <- USAGE_AND_FINANCIALS |>
     group_by(Agency, Mode) |>
     filter(sum(Total_UPT, na.rm = TRUE) >= 400000) |>
     summarise(UPT = sum(Total_UPT),  .groups = 'drop') |>
     arrange(desc(UPT)) |>
     slice(1)
print(most_upt_2022)
```

The subway of the MTA New York City Transit system had the most UPT in 2022 at 1,793,073,801.

Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?

```{r}
highest_farebox_recovery <- USAGE_AND_FINANCIALS |>
  mutate(farebox_recovery = `Total Fares` / Expenses) |>
  arrange(desc(farebox_recovery)) |>
  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |> #to be able to see the desired column in my code
  slice(1)

print(highest_farebox_recovery)
```

In 2022, vanpooling of the Transit Authority of Central Kentucky had the highest farebox recovery at 2.38.

Which transit system (agency and mode) has the lowest expenses per UPT?

```{r}
lowest_expenses_per_upt <- USAGE_AND_FINANCIALS |>
  mutate(expenses_per_upt = Expenses / Total_UPT) |>
  arrange(expenses_per_upt) |>
  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |> #to be able to see the desired column in my code
  slice(1)

print(lowest_expenses_per_upt)
```

The transit system with the lowest expenses per UPT is the North Carolina State University bus with expenses per UPT at \$1.18.

Which transit system (agency and mode) has the highest total fares per UPT?

```{r}
highest_fares_per_upt <- USAGE_AND_FINANCIALS |>
  mutate(fares_per_upt = `Total Fares` / Total_UPT) |>
  arrange(desc(fares_per_upt)) |>
  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |> #to be able to see the desired column in my code
  slice(1)

print(highest_fares_per_upt)
```

In 2022, the highest total fares per UPT is at the Altoona Metro Transit by Demand Response.

Which transit system (agency and mode) has the lowest expenses per VRM?

```{r}
lowest_expenses_per_vrm <- USAGE_AND_FINANCIALS |>
  mutate(expenses_per_vrm = Expenses / Total_VRM) |>
  arrange(expenses_per_vrm) |>
  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |> #to be able to see the desired column in my code
  slice(1)

print(lowest_expenses_per_vrm)
```

New Mexico Department of Transportation's vanpooling system has the lowest expenses per VRM at 0.337.

Which transit system (agency and mode) has the highest total fares per VRM?

```{r}
highest_fares_per_vrm <- USAGE_AND_FINANCIALS |>
  mutate(fares_per_vrm = `Total Fares` / Total_VRM) |>
  arrange(desc(fares_per_vrm)) |>
  select(-`Agency Name`, -`Total_VRM`, -`Total_UPT`) |> #to be able to see the desired column in my code
  slice(1)

print(highest_fares_per_vrm)
```

At \$237, the Chicago Water Taxi's ferry has the highest total fares per VRM.

## Conclusion
